#topic_maps.core.TopicMap{:topic-graph #graphs.core.Digraph{:nodes #{{:id 4190449, :title "Binary operations", :type :wiki-api.core/category} {:id 30774534, :title "1971 in computer science", :type :wiki-api.core/category} {:id 10469986, :title "Facility location", :type :wiki-api.core/article} {:id 690672, :title "Abstract algebra", :type :wiki-api.core/category} {:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} {:id 353042, :title "Graph minor", :type :wiki-api.core/article} {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} {:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} {:id 30870610, :title "Computability theory", :type :wiki-api.core/category} {:id 23173987, :title "Heuristic algorithms", :type :wiki-api.core/category} {:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} {:id 34604141, :title "Theorems in graph theory", :type :wiki-api.core/category} {:id 2634128, :title "Combinatorial algorithms", :type :wiki-api.core/category} {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} {:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 744360, :title "Networks", :type :wiki-api.core/category} {:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category} {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} {:id 7321256, :title "Graph invariants", :type :wiki-api.core/category} {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} {:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category} {:id 6783632, :title "Programming idioms", :type :wiki-api.core/category} {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 11489056, :title "Graph operations", :type :wiki-api.core/category} {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} {:id 18839833, :title "Network theory", :type :wiki-api.core/category} {:id 4628120, :title "Computational resources", :type :wiki-api.core/category} {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 21229677, :title "Mathematical problems", :type :wiki-api.core/category} {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 23152860, :title "Bilinear operators", :type :wiki-api.core/category} {:id 692453, :title "Matrix theory", :type :wiki-api.core/category} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 8135358, :title "Articles with example Scheme code", :type :wiki-api.core/category} {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 68833, :title "Iteration", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 33958933, :title "Substring indices", :type :wiki-api.core/category} {:id 22601667, :title "Recursion", :type :wiki-api.core/category} {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category} {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category} {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} {:id 969487, :title "Digital electronics", :type :wiki-api.core/category} {:id 877833, :title "Greek letters", :type :wiki-api.core/category} {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 485122, :title "Register allocation", :type :wiki-api.core/article} {:id 35482626, :title "Symmetric-key cryptography", :type :wiki-api.core/category} {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} {:id 1754736, :title "Cybernetics", :type :wiki-api.core/category} {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} {:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 4594748, :title "Computational problems", :type :wiki-api.core/category} {:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category} {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} {:id 1771298, :title "Compiler optimizations", :type :wiki-api.core/category} {:id 26263822, :title "Packaging machinery", :type :wiki-api.core/category} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} {:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} {:id 694172, :title "Complexity classes", :type :wiki-api.core/category} {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} {:id 1012758, :title "Tensors", :type :wiki-api.core/category} {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category} {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 28335948, :title "Articles with inconsistent citation formats", :type :wiki-api.core/category} {:id 4873906, :title "Systems engineering", :type :wiki-api.core/category} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} {:id 5226762, :title "Properties of groups", :type :wiki-api.core/category} {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} {:id 1008581, :title "Operations research", :type :wiki-api.core/category} {:id 1038825, :title "Asymptotic analysis", :type :wiki-api.core/category} {:id 5420314, :title "Network flow", :type :wiki-api.core/category} {:id 17844799, :title "Multiplication", :type :wiki-api.core/category} {:id 762162, :title "Data management", :type :wiki-api.core/category} {:id 34802090, :title "Glossaries of mathematics", :type :wiki-api.core/category} {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} {:id 771700, :title "Polynomials", :type :wiki-api.core/category} {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} {:id 691150, :title "Data structures", :type :wiki-api.core/category} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} {:id 21851248, :title "Matching", :type :wiki-api.core/category} {:id 675231, :title "Line graph", :type :wiki-api.core/article} {:id 721806, :title "Order theory", :type :wiki-api.core/category} {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} {:id 22056659, :title "Quantum phases", :type :wiki-api.core/category} {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} {:id 3190802, :title "Euclidean symmetries", :type :wiki-api.core/category} {:id 705249, :title "Boolean algebra", :type :wiki-api.core/category} {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} {:id 22616, :title "Omega", :type :wiki-api.core/article} {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} {:id 3539694, :title "Theory of cryptography", :type :wiki-api.core/category} {:id 28872387, :title "Subroutines", :type :wiki-api.core/category} {:id 692176, :title "Condensed matter physics", :type :wiki-api.core/category} {:id 753349, :title "Boolean function", :type :wiki-api.core/article} {:id 27853925, :title "Database index techniques", :type :wiki-api.core/category} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} {:id 702582, :title "Geometric algorithms", :type :wiki-api.core/category} {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category} {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} {:id 25163819, :title "Finite reflection groups", :type :wiki-api.core/category} {:id 11472332, :title "Articles containing proofs", :type :wiki-api.core/category} {:id 7437997, :title "Mathematical relations", :type :wiki-api.core/category} {:id 15913343, :title "Concurrent algorithms", :type :wiki-api.core/category} {:id 691117, :title "Computer science", :type :wiki-api.core/category} {:id 5621728, :title "Vowel letters", :type :wiki-api.core/category} {:id 22691076, :title "Graphical models", :type :wiki-api.core/category} {:id 1055995, :title "Cognition", :type :wiki-api.core/category} {:id 690777, :title "Linear algebra", :type :wiki-api.core/category} {:id 17193471, :title "Statistical models", :type :wiki-api.core/category} {:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category} {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} {:id 7312579, :title "Graph families", :type :wiki-api.core/category} {:id 7438165, :title "Wellfoundedness", :type :wiki-api.core/category} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category} {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category} {:id 3087602, :title "Topological order", :type :wiki-api.core/article} {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category} {:id 645676, :title "Flow network", :type :wiki-api.core/article} {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} {:id 20189596, :title "Probabilistic complexity theory", :type :wiki-api.core/category} {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} {:id 1120142, :title "Set families", :type :wiki-api.core/category} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} {:id 892724, :title "Quantum information science", :type :wiki-api.core/category} {:id 1013712, :title "Equations", :type :wiki-api.core/category} {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category} {:id 19717292, :title "Geometric graphs", :type :wiki-api.core/category} {:id 31036668, :title "Models of computation", :type :wiki-api.core/category} {:id 18207755, :title "Optimal control", :type :wiki-api.core/category} {:id 962981, :title "Inequalities", :type :wiki-api.core/category} {:id 20555200, :title "Morphisms", :type :wiki-api.core/category} {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} {:id 958609, :title "Statistical mechanics", :type :wiki-api.core/category} {:id 957606, :title "Parallel computing", :type :wiki-api.core/category} {:id 3211569, :title "Closure operators", :type :wiki-api.core/category} {:id 3596860, :title "Automata theory", :type :wiki-api.core/category} {:id 29526090, :title "Iterative methods", :type :wiki-api.core/category} {:id 1001537, :title "Mathematical notation", :type :wiki-api.core/category} {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category}}, :in-map {{:id 4190449, :title "Binary operations", :type :wiki-api.core/category} #{{:id 690672, :title "Abstract algebra", :type :wiki-api.core/category}}, {:id 30774534, :title "1971 in computer science", :type :wiki-api.core/category} #{}, {:id 10469986, :title "Facility location", :type :wiki-api.core/article} #{{:id 1008581, :title "Operations research", :type :wiki-api.core/category}}, {:id 690672, :title "Abstract algebra", :type :wiki-api.core/category} #{}, {:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} #{{:id 4594748, :title "Computational problems", :type :wiki-api.core/category}}, {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} #{{:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category}}, {:id 353042, :title "Graph minor", :type :wiki-api.core/article} #{{:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category}}, {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} #{{:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 20555200, :title "Morphisms", :type :wiki-api.core/category}}, {:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 7312579, :title "Graph families", :type :wiki-api.core/category}}, {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} #{{:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 3211569, :title "Closure operators", :type :wiki-api.core/category}}, {:id 44578, :title "Big O notation", :type :wiki-api.core/article} #{{:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} {:id 1038825, :title "Asymptotic analysis", :type :wiki-api.core/category} {:id 1001537, :title "Mathematical notation", :type :wiki-api.core/category}}, {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} #{{:id 7312579, :title "Graph families", :type :wiki-api.core/category} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category}}, {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} #{{:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category}}, {:id 30870610, :title "Computability theory", :type :wiki-api.core/category} #{}, {:id 23173987, :title "Heuristic algorithms", :type :wiki-api.core/category} #{}, {:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} #{{:id 721806, :title "Order theory", :type :wiki-api.core/category}}, {:id 34604141, :title "Theorems in graph theory", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 2634128, :title "Combinatorial algorithms", :type :wiki-api.core/category} #{}, {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} #{{:id 744360, :title "Networks", :type :wiki-api.core/category} {:id 22691076, :title "Graphical models", :type :wiki-api.core/category}}, {:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} #{{:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} {:id 29526090, :title "Iterative methods", :type :wiki-api.core/category}}, {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 744360, :title "Networks", :type :wiki-api.core/category} #{}, {:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category} #{{:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category} {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category}}, {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} #{{:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category}}, {:id 7321256, :title "Graph invariants", :type :wiki-api.core/category} #{{:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category}}, {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} #{{:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category}}, {:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category} #{}, {:id 6783632, :title "Programming idioms", :type :wiki-api.core/category} #{}, {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} #{{:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category}}, {:id 11489056, :title "Graph operations", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 34802090, :title "Glossaries of mathematics", :type :wiki-api.core/category}}, {:id 18839833, :title "Network theory", :type :wiki-api.core/category} #{{:id 744360, :title "Networks", :type :wiki-api.core/category} {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 1008581, :title "Operations research", :type :wiki-api.core/category}}, {:id 4628120, :title "Computational resources", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} #{{:id 18839833, :title "Network theory", :type :wiki-api.core/category} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category}}, {:id 21229677, :title "Mathematical problems", :type :wiki-api.core/category} #{}, {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} #{{:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category}}, {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 23152860, :title "Bilinear operators", :type :wiki-api.core/category} #{{:id 4190449, :title "Binary operations", :type :wiki-api.core/category}}, {:id 692453, :title "Matrix theory", :type :wiki-api.core/category} #{{:id 690777, :title "Linear algebra", :type :wiki-api.core/category}}, {:id 405944, :title "Time complexity", :type :wiki-api.core/article} #{{:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} {:id 4628120, :title "Computational resources", :type :wiki-api.core/category}}, {:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} #{{:id 2634128, :title "Combinatorial algorithms", :type :wiki-api.core/category} {:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 18839833, :title "Network theory", :type :wiki-api.core/category} {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category}}, {:id 8135358, :title "Articles with example Scheme code", :type :wiki-api.core/category} #{}, {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} #{{:id 892724, :title "Quantum information science", :type :wiki-api.core/category}}, {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} #{{:id 7312579, :title "Graph families", :type :wiki-api.core/category} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category}}, {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category}}, {:id 691898, :title "Graph theory", :type :wiki-api.core/category} #{{:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category} {:id 7437997, :title "Mathematical relations", :type :wiki-api.core/category}}, {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 68833, :title "Iteration", :type :wiki-api.core/article} #{{:id 8135358, :title "Articles with example Scheme code", :type :wiki-api.core/category} {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category}}, {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} #{{:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category} {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category}}, {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} #{{:id 11489056, :title "Graph operations", :type :wiki-api.core/category} {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category}}, {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} #{{:id 2634128, :title "Combinatorial algorithms", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 33958933, :title "Substring indices", :type :wiki-api.core/category} #{{:id 27853925, :title "Database index techniques", :type :wiki-api.core/category}}, {:id 22601667, :title "Recursion", :type :wiki-api.core/category} #{{:id 6783632, :title "Programming idioms", :type :wiki-api.core/category}}, {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} #{{:id 1012758, :title "Tensors", :type :wiki-api.core/category} {:id 771700, :title "Polynomials", :type :wiki-api.core/category} {:id 690777, :title "Linear algebra", :type :wiki-api.core/category}}, {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category} #{{:id 4594748, :title "Computational problems", :type :wiki-api.core/category}}, {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} #{{:id 31036668, :title "Models of computation", :type :wiki-api.core/category}}, {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category} #{{:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category}}, {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 1120142, :title "Set families", :type :wiki-api.core/category}}, {:id 969487, :title "Digital electronics", :type :wiki-api.core/category} #{}, {:id 877833, :title "Greek letters", :type :wiki-api.core/category} #{}, {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category}}, {:id 485122, :title "Register allocation", :type :wiki-api.core/article} #{{:id 1771298, :title "Compiler optimizations", :type :wiki-api.core/category}}, {:id 35482626, :title "Symmetric-key cryptography", :type :wiki-api.core/category} #{}, {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} #{{:id 23173987, :title "Heuristic algorithms", :type :wiki-api.core/category} {:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category}}, {:id 1754736, :title "Cybernetics", :type :wiki-api.core/category} #{}, {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} #{{:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category}}, {:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} #{}, {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} #{{:id 30774534, :title "1971 in computer science", :type :wiki-api.core/category} {:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} {:id 694172, :title "Complexity classes", :type :wiki-api.core/category} {:id 28335948, :title "Articles with inconsistent citation formats", :type :wiki-api.core/category}}, {:id 4594748, :title "Computational problems", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 21229677, :title "Mathematical problems", :type :wiki-api.core/category}}, {:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category} #{{:id 1754736, :title "Cybernetics", :type :wiki-api.core/category}}, {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 1771298, :title "Compiler optimizations", :type :wiki-api.core/category} #{}, {:id 26263822, :title "Packaging machinery", :type :wiki-api.core/category} #{}, {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} #{{:id 7312579, :title "Graph families", :type :wiki-api.core/category}}, {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} #{{:id 30870610, :title "Computability theory", :type :wiki-api.core/category} {:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category} {:id 22601667, :title "Recursion", :type :wiki-api.core/category} {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category} {:id 28872387, :title "Subroutines", :type :wiki-api.core/category}}, {:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} #{{:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} {:id 1008581, :title "Operations research", :type :wiki-api.core/category}}, {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} #{{:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category}}, {:id 694172, :title "Complexity classes", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} #{{:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category}}, {:id 1012758, :title "Tensors", :type :wiki-api.core/category} #{}, {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category} #{}, {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category}}, {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 28335948, :title "Articles with inconsistent citation formats", :type :wiki-api.core/category} #{}, {:id 4873906, :title "Systems engineering", :type :wiki-api.core/category} #{}, {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} #{{:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category}}, {:id 5226762, :title "Properties of groups", :type :wiki-api.core/category} #{}, {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} #{{:id 4594748, :title "Computational problems", :type :wiki-api.core/category}}, {:id 1008581, :title "Operations research", :type :wiki-api.core/category} #{}, {:id 1038825, :title "Asymptotic analysis", :type :wiki-api.core/category} #{}, {:id 5420314, :title "Network flow", :type :wiki-api.core/category} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category}}, {:id 17844799, :title "Multiplication", :type :wiki-api.core/category} #{}, {:id 762162, :title "Data management", :type :wiki-api.core/category} #{}, {:id 34802090, :title "Glossaries of mathematics", :type :wiki-api.core/category} #{}, {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} #{{:id 7321256, :title "Graph invariants", :type :wiki-api.core/category} {:id 11472332, :title "Articles containing proofs", :type :wiki-api.core/category} {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} {:id 962981, :title "Inequalities", :type :wiki-api.core/category}}, {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} #{{:id 15913343, :title "Concurrent algorithms", :type :wiki-api.core/category}}, {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} #{{:id 23152860, :title "Bilinear operators", :type :wiki-api.core/category} {:id 692453, :title "Matrix theory", :type :wiki-api.core/category} {:id 17844799, :title "Multiplication", :type :wiki-api.core/category} {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category}}, {:id 771700, :title "Polynomials", :type :wiki-api.core/category} #{{:id 690672, :title "Abstract algebra", :type :wiki-api.core/category} {:id 697506, :title "Numerical analysis", :type :wiki-api.core/category}}, {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} #{{:id 34604141, :title "Theorems in graph theory", :type :wiki-api.core/category} {:id 7438165, :title "Wellfoundedness", :type :wiki-api.core/category} {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category}}, {:id 691150, :title "Data structures", :type :wiki-api.core/category} #{{:id 762162, :title "Data management", :type :wiki-api.core/category}}, {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 21851248, :title "Matching", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 675231, :title "Line graph", :type :wiki-api.core/article} #{{:id 11489056, :title "Graph operations", :type :wiki-api.core/category} {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category}}, {:id 721806, :title "Order theory", :type :wiki-api.core/category} #{}, {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 7312579, :title "Graph families", :type :wiki-api.core/category}}, {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} {:id 702582, :title "Geometric algorithms", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category} {:id 19717292, :title "Geometric graphs", :type :wiki-api.core/category}}, {:id 797088, :title "Computer vision", :type :wiki-api.core/category} #{{:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category} {:id 26263822, :title "Packaging machinery", :type :wiki-api.core/category}}, {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} #{{:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} {:id 721806, :title "Order theory", :type :wiki-api.core/category}}, {:id 22056659, :title "Quantum phases", :type :wiki-api.core/category} #{{:id 692176, :title "Condensed matter physics", :type :wiki-api.core/category}}, {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} #{{:id 21851248, :title "Matching", :type :wiki-api.core/category} {:id 7312579, :title "Graph families", :type :wiki-api.core/category} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category}}, {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category} {:id 21851248, :title "Matching", :type :wiki-api.core/category}}, {:id 3190802, :title "Euclidean symmetries", :type :wiki-api.core/category} #{}, {:id 705249, :title "Boolean algebra", :type :wiki-api.core/category} #{{:id 690672, :title "Abstract algebra", :type :wiki-api.core/category}}, {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} #{{:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category}}, {:id 22616, :title "Omega", :type :wiki-api.core/article} #{{:id 877833, :title "Greek letters", :type :wiki-api.core/category} {:id 5621728, :title "Vowel letters", :type :wiki-api.core/category}}, {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} #{{:id 1055995, :title "Cognition", :type :wiki-api.core/category} {:id 31036668, :title "Models of computation", :type :wiki-api.core/category}}, {:id 3539694, :title "Theory of cryptography", :type :wiki-api.core/category} #{}, {:id 28872387, :title "Subroutines", :type :wiki-api.core/category} #{}, {:id 692176, :title "Condensed matter physics", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 753349, :title "Boolean function", :type :wiki-api.core/article} #{{:id 35482626, :title "Symmetric-key cryptography", :type :wiki-api.core/category} {:id 705249, :title "Boolean algebra", :type :wiki-api.core/category} {:id 3539694, :title "Theory of cryptography", :type :wiki-api.core/category}}, {:id 27853925, :title "Database index techniques", :type :wiki-api.core/category} #{{:id 691150, :title "Data structures", :type :wiki-api.core/category}}, {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} #{{:id 694172, :title "Complexity classes", :type :wiki-api.core/category}}, {:id 702582, :title "Geometric algorithms", :type :wiki-api.core/category} #{}, {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} #{{:id 33958933, :title "Substring indices", :type :wiki-api.core/category} {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category}}, {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 4594748, :title "Computational problems", :type :wiki-api.core/category}}, {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} #{{:id 969487, :title "Digital electronics", :type :wiki-api.core/category} {:id 31036668, :title "Models of computation", :type :wiki-api.core/category} {:id 3596860, :title "Automata theory", :type :wiki-api.core/category}}, {:id 25163819, :title "Finite reflection groups", :type :wiki-api.core/category} #{}, {:id 11472332, :title "Articles containing proofs", :type :wiki-api.core/category} #{}, {:id 7437997, :title "Mathematical relations", :type :wiki-api.core/category} #{}, {:id 15913343, :title "Concurrent algorithms", :type :wiki-api.core/category} #{}, {:id 691117, :title "Computer science", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 5621728, :title "Vowel letters", :type :wiki-api.core/category} #{}, {:id 22691076, :title "Graphical models", :type :wiki-api.core/category} #{{:id 17193471, :title "Statistical models", :type :wiki-api.core/category}}, {:id 1055995, :title "Cognition", :type :wiki-api.core/category} #{}, {:id 690777, :title "Linear algebra", :type :wiki-api.core/category} #{}, {:id 17193471, :title "Statistical models", :type :wiki-api.core/category} #{}, {:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category} #{{:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} {:id 958609, :title "Statistical mechanics", :type :wiki-api.core/category}}, {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} #{{:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} {:id 957606, :title "Parallel computing", :type :wiki-api.core/category}}, {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 7312579, :title "Graph families", :type :wiki-api.core/category} #{}, {:id 7438165, :title "Wellfoundedness", :type :wiki-api.core/category} #{{:id 721806, :title "Order theory", :type :wiki-api.core/category}}, {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category} #{{:id 7321256, :title "Graph invariants", :type :wiki-api.core/category}}, {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} #{{:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} {:id 20189596, :title "Probabilistic complexity theory", :type :wiki-api.core/category}}, {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category} #{{:id 7312579, :title "Graph families", :type :wiki-api.core/category}}, {:id 3087602, :title "Topological order", :type :wiki-api.core/article} #{{:id 22056659, :title "Quantum phases", :type :wiki-api.core/category} {:id 958609, :title "Statistical mechanics", :type :wiki-api.core/category}}, {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category} #{{:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} {:id 690777, :title "Linear algebra", :type :wiki-api.core/category}}, {:id 645676, :title "Flow network", :type :wiki-api.core/article} #{{:id 5420314, :title "Network flow", :type :wiki-api.core/category} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category}}, {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} #{{:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category}}, {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} #{{:id 5420314, :title "Network flow", :type :wiki-api.core/category}}, {:id 20189596, :title "Probabilistic complexity theory", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} #{{:id 690672, :title "Abstract algebra", :type :wiki-api.core/category} {:id 3211569, :title "Closure operators", :type :wiki-api.core/category}}, {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} #{{:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 4873906, :title "Systems engineering", :type :wiki-api.core/category} {:id 1013712, :title "Equations", :type :wiki-api.core/category} {:id 18207755, :title "Optimal control", :type :wiki-api.core/category}}, {:id 1120142, :title "Set families", :type :wiki-api.core/category} #{}, {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} #{}, {:id 892724, :title "Quantum information science", :type :wiki-api.core/category} #{{:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category}}, {:id 1013712, :title "Equations", :type :wiki-api.core/category} #{}, {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} #{}, {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 19717292, :title "Geometric graphs", :type :wiki-api.core/category} #{}, {:id 31036668, :title "Models of computation", :type :wiki-api.core/category} #{}, {:id 18207755, :title "Optimal control", :type :wiki-api.core/category} #{{:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category}}, {:id 962981, :title "Inequalities", :type :wiki-api.core/category} #{{:id 7437997, :title "Mathematical relations", :type :wiki-api.core/category}}, {:id 20555200, :title "Morphisms", :type :wiki-api.core/category} #{{:id 690672, :title "Abstract algebra", :type :wiki-api.core/category}}, {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} #{{:id 5226762, :title "Properties of groups", :type :wiki-api.core/category} {:id 3190802, :title "Euclidean symmetries", :type :wiki-api.core/category} {:id 25163819, :title "Finite reflection groups", :type :wiki-api.core/category}}, {:id 958609, :title "Statistical mechanics", :type :wiki-api.core/category} #{}, {:id 957606, :title "Parallel computing", :type :wiki-api.core/category} #{}, {:id 3211569, :title "Closure operators", :type :wiki-api.core/category} #{{:id 721806, :title "Order theory", :type :wiki-api.core/category}}, {:id 3596860, :title "Automata theory", :type :wiki-api.core/category} #{}, {:id 29526090, :title "Iterative methods", :type :wiki-api.core/category} #{{:id 697506, :title "Numerical analysis", :type :wiki-api.core/category}}, {:id 1001537, :title "Mathematical notation", :type :wiki-api.core/category} #{}, {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 3211569, :title "Closure operators", :type :wiki-api.core/category}}}, :out-map {{:id 4190449, :title "Binary operations", :type :wiki-api.core/category} #{{:id 23152860, :title "Bilinear operators", :type :wiki-api.core/category}}, {:id 30774534, :title "1971 in computer science", :type :wiki-api.core/category} #{{:id 23385892, :title "NP-complete", :type :wiki-api.core/article}}, {:id 10469986, :title "Facility location", :type :wiki-api.core/article} #{}, {:id 690672, :title "Abstract algebra", :type :wiki-api.core/category} #{{:id 4190449, :title "Binary operations", :type :wiki-api.core/category} {:id 771700, :title "Polynomials", :type :wiki-api.core/category} {:id 705249, :title "Boolean algebra", :type :wiki-api.core/category} {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} {:id 20555200, :title "Morphisms", :type :wiki-api.core/category}}, {:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article}}, {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} #{}, {:id 353042, :title "Graph minor", :type :wiki-api.core/article} #{}, {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} #{}, {:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} #{{:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} {:id 744165, :title "Chordal graph", :type :wiki-api.core/article}}, {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} #{}, {:id 44578, :title "Big O notation", :type :wiki-api.core/article} #{}, {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} #{}, {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} #{}, {:id 30870610, :title "Computability theory", :type :wiki-api.core/category} #{{:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article}}, {:id 23173987, :title "Heuristic algorithms", :type :wiki-api.core/category} #{{:id 172244, :title "Simulated annealing", :type :wiki-api.core/article}}, {:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category}}, {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} #{}, {:id 34604141, :title "Theorems in graph theory", :type :wiki-api.core/category} #{{:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article}}, {:id 2634128, :title "Combinatorial algorithms", :type :wiki-api.core/category} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category}}, {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} #{}, {:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} #{{:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category}}, {:id 744360, :title "Networks", :type :wiki-api.core/category} #{{:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} {:id 18839833, :title "Network theory", :type :wiki-api.core/category}}, {:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category} #{{:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article}}, {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} #{}, {:id 7321256, :title "Graph invariants", :type :wiki-api.core/category} #{{:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category}}, {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} #{}, {:id 990361, :title "Theoretical computer science", :type :wiki-api.core/category} #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} {:id 892724, :title "Quantum information science", :type :wiki-api.core/category}}, {:id 6783632, :title "Programming idioms", :type :wiki-api.core/category} #{{:id 22601667, :title "Recursion", :type :wiki-api.core/category}}, {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} #{{:id 3234221, :title "Analysis of algorithms", :type :wiki-api.core/category} {:id 4628120, :title "Computational resources", :type :wiki-api.core/category} {:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 4594748, :title "Computational problems", :type :wiki-api.core/category} {:id 694172, :title "Complexity classes", :type :wiki-api.core/category} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} {:id 20189596, :title "Probabilistic complexity theory", :type :wiki-api.core/category}}, {:id 11489056, :title "Graph operations", :type :wiki-api.core/category} #{{:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 675231, :title "Line graph", :type :wiki-api.core/article}}, {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} #{}, {:id 18839833, :title "Network theory", :type :wiki-api.core/category} #{{:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category}}, {:id 4628120, :title "Computational resources", :type :wiki-api.core/category} #{{:id 405944, :title "Time complexity", :type :wiki-api.core/article}}, {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} #{}, {:id 21229677, :title "Mathematical problems", :type :wiki-api.core/category} #{{:id 4594748, :title "Computational problems", :type :wiki-api.core/category}}, {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} #{}, {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} #{}, {:id 23152860, :title "Bilinear operators", :type :wiki-api.core/category} #{{:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article}}, {:id 692453, :title "Matrix theory", :type :wiki-api.core/category} #{{:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article}}, {:id 405944, :title "Time complexity", :type :wiki-api.core/article} #{}, {:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} #{{:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 5420314, :title "Network flow", :type :wiki-api.core/category} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category}}, {:id 8135358, :title "Articles with example Scheme code", :type :wiki-api.core/category} #{{:id 68833, :title "Iteration", :type :wiki-api.core/article}}, {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} #{}, {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} #{}, {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} #{}, {:id 691898, :title "Graph theory", :type :wiki-api.core/category} #{{:id 34604141, :title "Theorems in graph theory", :type :wiki-api.core/category} {:id 11489056, :title "Graph operations", :type :wiki-api.core/category} {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} {:id 18839833, :title "Network theory", :type :wiki-api.core/category} {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} {:id 21851248, :title "Matching", :type :wiki-api.core/category} {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} {:id 692176, :title "Condensed matter physics", :type :wiki-api.core/category} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category} {:id 691117, :title "Computer science", :type :wiki-api.core/category} {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category}}, {:id 26304777, :title "Graph theory objects", :type :wiki-api.core/category} #{{:id 353042, :title "Graph minor", :type :wiki-api.core/article} {:id 7321256, :title "Graph invariants", :type :wiki-api.core/category} {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article}}, {:id 68833, :title "Iteration", :type :wiki-api.core/article} #{}, {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} #{}, {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} #{}, {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} #{{:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} {:id 5420314, :title "Network flow", :type :wiki-api.core/category}}, {:id 33958933, :title "Substring indices", :type :wiki-api.core/category} #{{:id 3125116, :title "Inverted index", :type :wiki-api.core/article}}, {:id 22601667, :title "Recursion", :type :wiki-api.core/category} #{{:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article}}, {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} #{}, {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category} #{{:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} #{}, {:id 1406201, :title "Search algorithms", :type :wiki-api.core/category} #{{:id 3867956, :title "Combinatorial optimization", :type :wiki-api.core/category} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} {:id 3125116, :title "Inverted index", :type :wiki-api.core/article}}, {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} #{}, {:id 969487, :title "Digital electronics", :type :wiki-api.core/category} #{{:id 10931, :title "Finite-state machine", :type :wiki-api.core/article}}, {:id 877833, :title "Greek letters", :type :wiki-api.core/category} #{{:id 22616, :title "Omega", :type :wiki-api.core/article}}, {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} #{}, {:id 485122, :title "Register allocation", :type :wiki-api.core/article} #{}, {:id 35482626, :title "Symmetric-key cryptography", :type :wiki-api.core/category} #{{:id 753349, :title "Boolean function", :type :wiki-api.core/article}}, {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} #{}, {:id 1754736, :title "Cybernetics", :type :wiki-api.core/category} #{{:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category}}, {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} #{}, {:id 697506, :title "Numerical analysis", :type :wiki-api.core/category} #{{:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} {:id 771700, :title "Polynomials", :type :wiki-api.core/category} {:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category} {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category} {:id 29526090, :title "Iterative methods", :type :wiki-api.core/category}}, {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} #{}, {:id 4594748, :title "Computational problems", :type :wiki-api.core/category} #{{:id 1223322, :title "NP-complete problems", :type :wiki-api.core/category} {:id 3868527, :title "Polynomial-time problems", :type :wiki-api.core/category} {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category}}, {:id 700355, :title "Artificial intelligence", :type :wiki-api.core/category} #{{:id 1406201, :title "Search algorithms", :type :wiki-api.core/category} {:id 797088, :title "Computer vision", :type :wiki-api.core/category}}, {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} #{}, {:id 1771298, :title "Compiler optimizations", :type :wiki-api.core/category} #{{:id 485122, :title "Register allocation", :type :wiki-api.core/article}}, {:id 26263822, :title "Packaging machinery", :type :wiki-api.core/category} #{{:id 797088, :title "Computer vision", :type :wiki-api.core/category}}, {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} #{}, {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} #{}, {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} #{{:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article}}, {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} #{}, {:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category} #{{:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category} {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 18207755, :title "Optimal control", :type :wiki-api.core/category}}, {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} #{}, {:id 694172, :title "Complexity classes", :type :wiki-api.core/category} #{{:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article}}, {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} #{}, {:id 1012758, :title "Tensors", :type :wiki-api.core/category} #{{:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article}}, {:id 8761328, :title "Articles with example pseudocode", :type :wiki-api.core/category} #{{:id 68833, :title "Iteration", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article}}, {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} #{}, {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} #{}, {:id 28335948, :title "Articles with inconsistent citation formats", :type :wiki-api.core/category} #{{:id 23385892, :title "NP-complete", :type :wiki-api.core/article}}, {:id 4873906, :title "Systems engineering", :type :wiki-api.core/category} #{{:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} #{}, {:id 5226762, :title "Properties of groups", :type :wiki-api.core/category} #{{:id 100267, :title "Dihedral group", :type :wiki-api.core/article}}, {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} #{}, {:id 1008581, :title "Operations research", :type :wiki-api.core/category} #{{:id 10469986, :title "Facility location", :type :wiki-api.core/article} {:id 18839833, :title "Network theory", :type :wiki-api.core/category} {:id 18956829, :title "Mathematical optimization", :type :wiki-api.core/category}}, {:id 1038825, :title "Asymptotic analysis", :type :wiki-api.core/category} #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article}}, {:id 5420314, :title "Network flow", :type :wiki-api.core/category} #{{:id 645676, :title "Flow network", :type :wiki-api.core/article} {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article}}, {:id 17844799, :title "Multiplication", :type :wiki-api.core/category} #{{:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article}}, {:id 762162, :title "Data management", :type :wiki-api.core/category} #{{:id 691150, :title "Data structures", :type :wiki-api.core/category}}, {:id 34802090, :title "Glossaries of mathematics", :type :wiki-api.core/category} #{{:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article}}, {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} #{}, {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} #{{:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article}}, {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} #{}, {:id 771700, :title "Polynomials", :type :wiki-api.core/category} #{{:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article}}, {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} #{}, {:id 691150, :title "Data structures", :type :wiki-api.core/category} #{{:id 27853925, :title "Database index techniques", :type :wiki-api.core/category}}, {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} #{}, {:id 21851248, :title "Matching", :type :wiki-api.core/category} #{{:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, {:id 675231, :title "Line graph", :type :wiki-api.core/article} #{}, {:id 721806, :title "Order theory", :type :wiki-api.core/category} #{{:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} {:id 7438165, :title "Wellfoundedness", :type :wiki-api.core/category} {:id 3211569, :title "Closure operators", :type :wiki-api.core/category}}, {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} #{}, {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} #{}, {:id 797088, :title "Computer vision", :type :wiki-api.core/category} #{}, {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} #{}, {:id 22056659, :title "Quantum phases", :type :wiki-api.core/category} #{{:id 3087602, :title "Topological order", :type :wiki-api.core/article}}, {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} #{}, {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} #{}, {:id 3190802, :title "Euclidean symmetries", :type :wiki-api.core/category} #{{:id 100267, :title "Dihedral group", :type :wiki-api.core/article}}, {:id 705249, :title "Boolean algebra", :type :wiki-api.core/category} #{{:id 753349, :title "Boolean function", :type :wiki-api.core/article}}, {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} #{}, {:id 22616, :title "Omega", :type :wiki-api.core/article} #{}, {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} #{}, {:id 3539694, :title "Theory of cryptography", :type :wiki-api.core/category} #{{:id 753349, :title "Boolean function", :type :wiki-api.core/article}}, {:id 28872387, :title "Subroutines", :type :wiki-api.core/category} #{{:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article}}, {:id 692176, :title "Condensed matter physics", :type :wiki-api.core/category} #{{:id 22056659, :title "Quantum phases", :type :wiki-api.core/category}}, {:id 753349, :title "Boolean function", :type :wiki-api.core/article} #{}, {:id 27853925, :title "Database index techniques", :type :wiki-api.core/category} #{{:id 33958933, :title "Substring indices", :type :wiki-api.core/category}}, {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} #{}, {:id 702582, :title "Geometric algorithms", :type :wiki-api.core/category} #{{:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article}}, {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} #{}, {:id 25346631, :title "Computational problems in graph theory", :type :wiki-api.core/category} #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 699287, :title "Graph algorithms", :type :wiki-api.core/category} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article}}, {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} #{}, {:id 25163819, :title "Finite reflection groups", :type :wiki-api.core/category} #{{:id 100267, :title "Dihedral group", :type :wiki-api.core/article}}, {:id 11472332, :title "Articles containing proofs", :type :wiki-api.core/category} #{{:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article}}, {:id 7437997, :title "Mathematical relations", :type :wiki-api.core/category} #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 962981, :title "Inequalities", :type :wiki-api.core/category}}, {:id 15913343, :title "Concurrent algorithms", :type :wiki-api.core/category} #{{:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category}}, {:id 691117, :title "Computer science", :type :wiki-api.core/category} #{}, {:id 5621728, :title "Vowel letters", :type :wiki-api.core/category} #{{:id 22616, :title "Omega", :type :wiki-api.core/article}}, {:id 22691076, :title "Graphical models", :type :wiki-api.core/category} #{{:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category}}, {:id 1055995, :title "Cognition", :type :wiki-api.core/category} #{{:id 285512, :title "State (computer science)", :type :wiki-api.core/article}}, {:id 690777, :title "Linear algebra", :type :wiki-api.core/category} #{{:id 692453, :title "Matrix theory", :type :wiki-api.core/category} {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category}}, {:id 17193471, :title "Statistical models", :type :wiki-api.core/category} #{{:id 22691076, :title "Graphical models", :type :wiki-api.core/category}}, {:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category} #{{:id 172244, :title "Simulated annealing", :type :wiki-api.core/article}}, {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} #{}, {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} #{}, {:id 1575639, :title "Topological graph theory", :type :wiki-api.core/category} #{{:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article}}, {:id 7312579, :title "Graph families", :type :wiki-api.core/category} #{{:id 18292893, :title "Perfect graphs", :type :wiki-api.core/category} {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} {:id 17606898, :title "Trees (graph theory)", :type :wiki-api.core/category} {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category}}, {:id 7438165, :title "Wellfoundedness", :type :wiki-api.core/category} #{{:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article}}, {:id 25113396, :title "Graph connectivity", :type :wiki-api.core/category} #{{:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article}}, {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} #{{:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category}}, {:id 16033448, :title "Intersection classes of graphs", :type :wiki-api.core/category} #{{:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} {:id 675231, :title "Line graph", :type :wiki-api.core/article} {:id 744165, :title "Chordal graph", :type :wiki-api.core/article}}, {:id 3087602, :title "Topological order", :type :wiki-api.core/article} #{}, {:id 1770656, :title "Numerical linear algebra", :type :wiki-api.core/category} #{{:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category} {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article}}, {:id 645676, :title "Flow network", :type :wiki-api.core/article} #{}, {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} #{}, {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} #{}, {:id 20189596, :title "Probabilistic complexity theory", :type :wiki-api.core/category} #{{:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category}}, {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} #{}, {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} #{}, {:id 1120142, :title "Set families", :type :wiki-api.core/category} #{{:id 870399, :title "Set cover problem", :type :wiki-api.core/article}}, {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} #{{:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} {:id 645676, :title "Flow network", :type :wiki-api.core/article}}, {:id 892724, :title "Quantum information science", :type :wiki-api.core/category} #{{:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category}}, {:id 1013712, :title "Equations", :type :wiki-api.core/category} #{{:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} #{}, {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} #{}, {:id 28226574, :title "Graph minor theory", :type :wiki-api.core/category} #{{:id 353042, :title "Graph minor", :type :wiki-api.core/article} {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article}}, {:id 19717292, :title "Geometric graphs", :type :wiki-api.core/category} #{{:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article}}, {:id 31036668, :title "Models of computation", :type :wiki-api.core/category} #{{:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article}}, {:id 18207755, :title "Optimal control", :type :wiki-api.core/category} #{{:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 962981, :title "Inequalities", :type :wiki-api.core/category} #{{:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article}}, {:id 20555200, :title "Morphisms", :type :wiki-api.core/category} #{{:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article}}, {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} #{}, {:id 958609, :title "Statistical mechanics", :type :wiki-api.core/category} #{{:id 5200150, :title "Monte Carlo methods", :type :wiki-api.core/category} {:id 3087602, :title "Topological order", :type :wiki-api.core/article}}, {:id 957606, :title "Parallel computing", :type :wiki-api.core/category} #{{:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article}}, {:id 3211569, :title "Closure operators", :type :wiki-api.core/category} #{{:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category}}, {:id 3596860, :title "Automata theory", :type :wiki-api.core/category} #{{:id 10931, :title "Finite-state machine", :type :wiki-api.core/article}}, {:id 29526090, :title "Iterative methods", :type :wiki-api.core/category} #{{:id 34044100, :title "Optimization algorithms and methods", :type :wiki-api.core/category}}, {:id 1001537, :title "Mathematical notation", :type :wiki-api.core/category} #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article}}, {:id 2485940, :title "Matroid theory", :type :wiki-api.core/category} #{{:id 31256484, :title "Exchange algorithms", :type :wiki-api.core/category} {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article}}}}, :topic-docs #graphs.core.Digraph{:nodes #{{:id 10469986, :title "Facility location", :type :wiki-api.core/article} {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} {:id 353042, :title "Graph minor", :type :wiki-api.core/article} {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 44578, :title "Big O notation", :type :wiki-api.core/article} 949793 {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} 1219457 3622817 1033410 904418 {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} 2973474 {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} 3735490 3271843 {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} 1310275 950883 {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} 2921668 1033412 {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} 542854 2817190 832551 1078407 {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} 1031687 {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} 3080071 {:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 68833, :title "Iteration", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} 623305 952009 {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} 1031977 494762 610922 951018 {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 485122, :title "Register allocation", :type :wiki-api.core/article} 1119499 {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} 3077547 {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} 2862795 {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} 953421 {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} 951789 {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} 1031246 {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} 832718 {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} 1077391 {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} 1031248 1078416 {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} 545424 832368 {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} 1060529 {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} {:id 691150, :title "Data structures", :type :wiki-api.core/category} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} 610994 3790610 1343091 {:id 675231, :title "Line graph", :type :wiki-api.core/article} {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} 980819 {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} 2813652 1280213 {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} {:id 22616, :title "Omega", :type :wiki-api.core/article} 832981 {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} 505781 1340470 1118422 611606 949686 {:id 753349, :title "Boolean function", :type :wiki-api.core/article} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} 3028343 {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} 292855 1031416 {:id 691117, :title "Computer science", :type :wiki-api.core/category} 1123449 3690105 211322 {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} 971578 {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} {:id 3087602, :title "Topological order", :type :wiki-api.core/article} 950139 {:id 645676, :title "Flow network", :type :wiki-api.core/article} {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} 622748 {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} 1060701 3750110 {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} {:id 957606, :title "Parallel computing", :type :wiki-api.core/category}}, :in-map {{:id 10469986, :title "Facility location", :type :wiki-api.core/article} #{}, {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} #{}, {:id 353042, :title "Graph minor", :type :wiki-api.core/article} #{}, {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} #{}, {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} #{}, {:id 44578, :title "Big O notation", :type :wiki-api.core/article} #{}, 949793 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article}}, {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} #{}, {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} #{}, 1219457 #{{:id 10469986, :title "Facility location", :type :wiki-api.core/article} {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category}}, 3622817 #{{:id 11973947, :title "Graph partition", :type :wiki-api.core/article}}, 1033410 #{{:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, 904418 #{{:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category}}, {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} #{}, 2973474 #{{:id 8149170, :title "Graph embedding", :type :wiki-api.core/article}}, {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} #{}, 3735490 #{{:id 11973947, :title "Graph partition", :type :wiki-api.core/article}}, 3271843 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} #{}, {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} #{}, 1310275 #{{:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article}}, 950883 #{{:id 645676, :title "Flow network", :type :wiki-api.core/article}}, {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} #{}, 2921668 #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article}}, 1033412 #{{:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} #{}, {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} #{}, {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} #{}, {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} #{}, {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} #{}, {:id 405944, :title "Time complexity", :type :wiki-api.core/article} #{}, 542854 #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 485122, :title "Register allocation", :type :wiki-api.core/article}}, 2817190 #{{:id 353042, :title "Graph minor", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article}}, 832551 #{{:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article}}, 1078407 #{{:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 691150, :title "Data structures", :type :wiki-api.core/category} {:id 753349, :title "Boolean function", :type :wiki-api.core/article}}, {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} #{}, 1031687 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} #{}, {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} #{}, 3080071 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 691898, :title "Graph theory", :type :wiki-api.core/category} #{}, {:id 68833, :title "Iteration", :type :wiki-api.core/article} #{}, {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} #{}, {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} #{}, {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} #{}, {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} #{}, 623305 #{{:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} {:id 22616, :title "Omega", :type :wiki-api.core/article} {:id 100267, :title "Dihedral group", :type :wiki-api.core/article}}, 952009 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category}}, {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} #{}, 1031977 #{{:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category}}, 494762 #{{:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category}}, 610922 #{{:id 645676, :title "Flow network", :type :wiki-api.core/article}}, 951018 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 675231, :title "Line graph", :type :wiki-api.core/article}}, {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} #{}, {:id 485122, :title "Register allocation", :type :wiki-api.core/article} #{}, 1119499 #{{:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article}}, {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} #{}, 3077547 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} #{}, 2862795 #{{:id 68833, :title "Iteration", :type :wiki-api.core/article}}, {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} #{}, 953421 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article}}, {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} #{}, 951789 #{{:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article}}, {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} #{}, {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} #{}, {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} #{}, 1031246 #{{:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article}}, {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} #{}, 832718 #{{:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} {:id 957606, :title "Parallel computing", :type :wiki-api.core/category}}, {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} #{}, 1077391 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} {:id 691150, :title "Data structures", :type :wiki-api.core/category} {:id 744165, :title "Chordal graph", :type :wiki-api.core/article}}, {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} #{}, {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} #{}, {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} #{}, 1031248 #{{:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category}}, 1078416 #{{:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category}}, {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} #{}, 545424 #{{:id 3125116, :title "Inverted index", :type :wiki-api.core/article}}, 832368 #{{:id 691117, :title "Computer science", :type :wiki-api.core/category}}, {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} #{}, {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} #{}, 1060529 #{{:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article}}, {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} #{}, {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} #{}, {:id 691150, :title "Data structures", :type :wiki-api.core/category} #{}, {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} #{}, 610994 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article}}, 3790610 #{{:id 2777098, :title "Dense graph", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category}}, 1343091 #{{:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article}}, {:id 675231, :title "Line graph", :type :wiki-api.core/article} #{}, {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} #{}, {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} #{}, {:id 797088, :title "Computer vision", :type :wiki-api.core/category} #{}, 980819 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category} {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} {:id 691150, :title "Data structures", :type :wiki-api.core/category}}, {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} #{}, {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} #{}, {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} #{}, 2813652 #{{:id 19655050, :title "Directed graphs", :type :wiki-api.core/category}}, 1280213 #{{:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article}}, {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} #{}, {:id 22616, :title "Omega", :type :wiki-api.core/article} #{}, 832981 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} #{}, 505781 #{{:id 17766079, :title "Random graphs", :type :wiki-api.core/category} {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} {:id 285512, :title "State (computer science)", :type :wiki-api.core/article}}, 1340470 #{{:id 405944, :title "Time complexity", :type :wiki-api.core/article}}, 1118422 #{{:id 292239, :title "Transitive closure", :type :wiki-api.core/article} {:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} {:id 3087602, :title "Topological order", :type :wiki-api.core/article} {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category}}, 611606 #{{:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} {:id 11973947, :title "Graph partition", :type :wiki-api.core/article}}, 949686 #{{:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category}}, {:id 753349, :title "Boolean function", :type :wiki-api.core/article} #{}, {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} #{}, 3028343 #{{:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article}}, {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} #{}, {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} #{}, 292855 #{{:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} {:id 797088, :title "Computer vision", :type :wiki-api.core/category} {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category}}, 1031416 #{{:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article}}, {:id 691117, :title "Computer science", :type :wiki-api.core/category} #{}, 1123449 #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category}}, 3690105 #{{:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category}}, 211322 #{{:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category}}, {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} #{}, 971578 #{{:id 691150, :title "Data structures", :type :wiki-api.core/category}}, {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} #{}, {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} #{}, {:id 3087602, :title "Topological order", :type :wiki-api.core/article} #{}, 950139 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article}}, {:id 645676, :title "Flow network", :type :wiki-api.core/article} #{}, {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} #{}, 622748 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article} {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} {:id 405944, :title "Time complexity", :type :wiki-api.core/article} {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article}}, {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} #{}, {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} #{}, {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} #{}, {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} #{}, {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} #{}, {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} #{}, 1060701 #{{:id 44578, :title "Big O notation", :type :wiki-api.core/article}}, 3750110 #{{:id 691898, :title "Graph theory", :type :wiki-api.core/category}}, {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} #{}, {:id 957606, :title "Parallel computing", :type :wiki-api.core/category} #{}}, :out-map {{:id 10469986, :title "Facility location", :type :wiki-api.core/article} #{1219457}, {:id 89247, :title "Greedy algorithm", :type :wiki-api.core/article} #{1219457 1343091}, {:id 353042, :title "Graph minor", :type :wiki-api.core/article} #{2817190}, {:id 247577, :title "Graph isomorphism", :type :wiki-api.core/article} #{623305 1031416}, {:id 292239, :title "Transitive closure", :type :wiki-api.core/article} #{494762 1118422}, {:id 44578, :title "Big O notation", :type :wiki-api.core/article} #{949793 1031687 952009 494762 951018 953421 1077391 610994 1118422 950139 622748 1060701}, 949793 #{}, {:id 7566175, :title "K-vertex-connected graph", :type :wiki-api.core/article} #{494762}, {:id 37956, :title "Best, worst and average case", :type :wiki-api.core/article} #{1078407 494762}, 1219457 #{}, 3622817 #{}, 1033410 #{}, 904418 #{}, {:id 42693, :title "Upper and lower bounds", :type :wiki-api.core/article} #{949793 1219457 950139}, 2973474 #{}, {:id 1718975, :title "Bayesian networks", :type :wiki-api.core/category} #{904418}, 3735490 #{}, 3271843 #{}, {:id 1614932, :title "Graph coloring", :type :wiki-api.core/category} #{949793 2921668 542854 832551}, {:id 8149170, :title "Graph embedding", :type :wiki-api.core/article} #{2973474}, 1310275 #{}, 950883 #{}, {:id 32183016, :title "Ear decomposition", :type :wiki-api.core/article} #{622748}, 2921668 #{}, 1033412 #{}, {:id 693727, :title "Computational complexity theory", :type :wiki-api.core/category} #{1123449 211322}, {:id 325802, :title "Glossary of graph theory", :type :wiki-api.core/article} #{1031977}, {:id 41985, :title "Shortest path problem", :type :wiki-api.core/article} #{1219457 494762 951789}, {:id 246223, :title "Connected component (graph theory)", :type :wiki-api.core/article} #{622748}, {:id 524501, :title "Independent set (graph theory)", :type :wiki-api.core/article} #{1219457 949686}, {:id 405944, :title "Time complexity", :type :wiki-api.core/article} #{1310275 2817190 1078407 1031246 1340470 611606 950139 622748}, 542854 #{}, 2817190 #{}, 832551 #{}, 1078407 #{}, {:id 702600, :title "Quantum algorithms", :type :wiki-api.core/category} #{623305}, 1031687 #{}, {:id 4989397, :title "Biconnected graph", :type :wiki-api.core/article} #{1060529}, {:id 3562453, :title "Minimum cut", :type :wiki-api.core/article} #{1031246 611606}, 3080071 #{}, {:id 691898, :title "Graph theory", :type :wiki-api.core/category} #{3271843 3080071 3077547 980819 832981 3750110}, {:id 68833, :title "Iteration", :type :wiki-api.core/article} #{2862795}, {:id 97034, :title "Depth-first search", :type :wiki-api.core/article} #{951789 1060529 1118422}, {:id 159023, :title "Tree decomposition", :type :wiki-api.core/article} #{1077391}, {:id 218268, :title "Characteristic polynomial", :type :wiki-api.core/article} #{494762}, {:id 956675, :title "Parallel random-access machine", :type :wiki-api.core/article} #{953421 622748}, 623305 #{}, 952009 #{}, {:id 870399, :title "Set cover problem", :type :wiki-api.core/article} #{1219457 950139}, 1031977 #{}, 494762 #{}, 610922 #{}, 951018 #{}, {:id 2180494, :title "Cut (graph theory)", :type :wiki-api.core/article} #{1119499 1031248 292855}, {:id 485122, :title "Register allocation", :type :wiki-api.core/article} #{542854}, 1119499 #{}, {:id 172244, :title "Simulated annealing", :type :wiki-api.core/article} #{1031248 1078416 292855}, 3077547 #{}, {:id 325806, :title "Graph (mathematics)", :type :wiki-api.core/article} #{1031687 1060529}, 2862795 #{}, {:id 23385892, :title "NP-complete", :type :wiki-api.core/article} #{832718 949686}, 953421 #{}, {:id 17766079, :title "Random graphs", :type :wiki-api.core/category} #{1031687 505781}, 951789 #{}, {:id 11973947, :title "Graph partition", :type :wiki-api.core/article} #{3622817 3735490 2921668 1078416 611606}, {:id 562782, :title "Vertex cover", :type :wiki-api.core/article} #{1219457 949686 950139}, {:id 4044867, :title "Recursion (computer science)", :type :wiki-api.core/article} #{980819}, 1031246 #{}, {:id 28029415, :title "Planar graphs", :type :wiki-api.core/category} #{952009 949686 950139}, 832718 #{}, {:id 684680, :title "Strongly connected component", :type :wiki-api.core/article} #{1060529}, 1077391 #{}, {:id 450062, :title "Subgraph isomorphism problem", :type :wiki-api.core/article} #{1031687 1031416}, {:id 21689422, :title "Edge dominating set", :type :wiki-api.core/article} #{949686 950139}, {:id 868737, :title "Genetic algorithms", :type :wiki-api.core/category} #{1031977 832718 1078416}, 1031248 #{}, 1078416 #{}, {:id 1126536, :title "Optimization problem", :type :wiki-api.core/article} #{1280213}, 545424 #{}, 832368 #{}, {:id 18298594, :title "Crossing number (graph theory)", :type :wiki-api.core/article} #{3028343}, {:id 15970362, :title "Distributed algorithms", :type :wiki-api.core/category} #{505781}, 1060529 #{}, {:id 125280, :title "Matrix multiplication", :type :wiki-api.core/article} #{494762}, {:id 351769, :title "Robertsonâ€“Seymour theorem", :type :wiki-api.core/article} #{2817190}, {:id 691150, :title "Data structures", :type :wiki-api.core/category} #{1078407 1077391 980819 971578}, {:id 1747972, :title "Dominating set", :type :wiki-api.core/article} #{949686 950139}, 610994 #{}, 3790610 #{}, 1343091 #{}, {:id 675231, :title "Line graph", :type :wiki-api.core/article} #{951018}, {:id 2777098, :title "Dense graph", :type :wiki-api.core/article} #{3790610}, {:id 498304, :title "Steiner tree problem", :type :wiki-api.core/article} #{1219457}, {:id 797088, :title "Computer vision", :type :wiki-api.core/category} #{3077547 1031246 1031248 292855}, 980819 #{}, {:id 6978672, :title "Comparability graph", :type :wiki-api.core/article} #{953421}, {:id 17283742, :title "Skew-symmetric graph", :type :wiki-api.core/article} #{1310275}, {:id 581797, :title "Matching (graph theory)", :type :wiki-api.core/article} #{1033410 1033412 1031687 494762 1280213 950139}, 2813652 #{}, 1280213 #{}, {:id 16384086, :title "Job shop scheduling", :type :wiki-api.core/article} #{1219457}, {:id 22616, :title "Omega", :type :wiki-api.core/article} #{623305}, 832981 #{}, {:id 285512, :title "State (computer science)", :type :wiki-api.core/article} #{505781}, 505781 #{}, 1340470 #{}, 1118422 #{}, 611606 #{}, 949686 #{}, {:id 753349, :title "Boolean function", :type :wiki-api.core/article} #{1078407}, {:id 21562, :title "NP (complexity)", :type :wiki-api.core/article} #{949793 1031248 949686 292855}, 3028343 #{}, {:id 3125116, :title "Inverted index", :type :wiki-api.core/article} #{545424}, {:id 10931, :title "Finite-state machine", :type :wiki-api.core/article} #{1123449}, 292855 #{}, 1031416 #{}, {:id 691117, :title "Computer science", :type :wiki-api.core/category} #{832368}, 1123449 #{}, 3690105 #{}, 211322 #{}, {:id 148840, :title "Parallel algorithm", :type :wiki-api.core/article} #{832551 953421 622748}, 971578 #{}, {:id 2597177, :title "Approximation algorithms", :type :wiki-api.core/category} #{1219457 1031248 3790610 949686 292855 3690105}, {:id 31548188, :title "Randomized algorithms", :type :wiki-api.core/category} #{494762}, {:id 3087602, :title "Topological order", :type :wiki-api.core/article} #{1118422}, 950139 #{}, {:id 645676, :title "Flow network", :type :wiki-api.core/article} #{950883 610922}, {:id 744165, :title "Chordal graph", :type :wiki-api.core/article} #{1077391}, 622748 #{}, {:id 403165, :title "Maximum flow problem", :type :wiki-api.core/article} #{1031246}, {:id 293802, :title "Closure (mathematics)", :type :wiki-api.core/article} #{950139}, {:id 2699398, :title "Dynamic programming", :type :wiki-api.core/category} #{3077547 949686}, {:id 19655050, :title "Directed graphs", :type :wiki-api.core/category} #{2813652 1118422}, {:id 30577353, :title "Temporal logic", :type :wiki-api.core/category} #{1123449}, {:id 1860368, :title "Feedback vertex set", :type :wiki-api.core/article} #{950139}, 1060701 #{}, 3750110 #{}, {:id 100267, :title "Dihedral group", :type :wiki-api.core/article} #{623305}, {:id 957606, :title "Parallel computing", :type :wiki-api.core/category} #{832718}}}, :doc-map {949793 #search_api.search_api.Paper{:id 949793, :key "journals/jacm/Blum94", :title "New Approximation Algorithms for Graph Coloring.", :abstract "The problem of coloring a graph with the minimum number of colors is well known to be NP-hard, even restricted to k-colorable graphs for constant k &ge; 3. This paper explores the approximation problem of coloring k-colorable graphs with as few additional colors as possible in polynomial time, with special focus on the case of k = 3. The previous best upper bound on the number of colors needed for coloring 3-colorable n-vertex graphs in polynomial time was on/logn colors by Berger and Rompel, improving a bound of on colors by Wigderson. This paper presents an algorithm to color any 3-colorable graph with on3/8polylog n colors, thus breaking an &ldquo;O((n1/2-&ogr;(1)) barrier&rdquo;. The algorithm given here is based on examining second-order neighborhoods of vertices, rather than just immediate neighborhoods of vertices as in previous approaches. We extend our results to improve the worst-case bounds for coloring k-colorable graphs for constant k > 3 as well.", :author (#search_api.search_api.Author{:id 79111, :first-name nil, :last-name nil, :full-name "Avrim Blum"}), :year 1994, :venue "J. ACM", :ncit 89, :string "New Approximation Algorithms for Graph Coloring.. The problem of coloring a graph with the minimum number of colors is well known to be NP-hard, even restricted to k-colorable graphs for constant k &ge; 3. This paper explores the approximation problem of coloring k-colorable graphs with as few additional colors as possible in polynomial time, with special focus on the case of k = 3. The previous best upper bound on the number of colors needed for coloring 3-colorable n-vertex graphs in polynomial time was on/logn colors by Berger and Rompel, improving a bound of on colors by Wigderson. This paper presents an algorithm to color any 3-colorable graph with on3/8polylog n colors, thus breaking an &ldquo;O((n1/2-&ogr;(1)) barrier&rdquo;. The algorithm given here is based on examining second-order neighborhoods of vertices, rather than just immediate neighborhoods of vertices as in previous approaches. We extend our results to improve the worst-case bounds for coloring k-colorable graphs for constant k > 3 as well.", :doc-id "New Approximation Algorithms for Graph Coloring. 1994  "}, 1219457 #search_api.search_api.Paper{:id 1219457, :key "journals/algorithmica/DavisI09", :title "Models of Greedy Algorithms for Graph Problems.", :abstract "Borodin et al. (Algorithmica 37(4):295&#x2013;326, 2003) gave a model of greedy-like algorithms for scheduling problems and Angelopoulos and Borodin (Algorithmica 40(4):271&#x2013;291, 2004) extended their work to facility location and set cover problems. We generalize their model to include other optimization problems, and apply the generalized framework to graph problems. Our goal is to define an abstract model that captures the intrinsic power and limitations of greedy algorithms for various graph optimization problems, as Borodin et al. (Algorithmica 37(4):295&#x2013;326, 2003) did for scheduling. We prove bounds on the approximation ratio achievable by such algorithms for basic graph problems such as shortest path, weighted vertex cover, Steiner tree, and independent set. For example, we show that, for the shortest path problem, no algorithm in the FIXED priority model can achieve any approximation ratio (even one dependent on the graph size), but the well-known Dijkstra&#x2019;s algorithm is an optimal ADAPTIVE priority algorithm. We also prove that the approximation ratio for weighted vertex cover achievable by ADAPTIVE priority algorithms is exactly&#x00a0;2. Here, a new lower bound matches the known upper bounds (Johnson in J. Comput. Syst. Sci. 9(3):256&#x2013;278, 1974). We give a number of other lower bounds for priority algorithms, as well as a new approximation algorithm for minimum Steiner tree problem with weights in the interval [1,2].", :author (#search_api.search_api.Author{:id 1140112, :first-name nil, :last-name nil, :full-name "Sashka Davis"} #search_api.search_api.Author{:id 1440899, :first-name nil, :last-name nil, :full-name "Russell Impagliazzo"}), :year 2009, :venue "Algorithmica", :ncit 36, :string "Models of Greedy Algorithms for Graph Problems.. Borodin et al. (Algorithmica 37(4):295&#x2013;326, 2003) gave a model of greedy-like algorithms for scheduling problems and Angelopoulos and Borodin (Algorithmica 40(4):271&#x2013;291, 2004) extended their work to facility location and set cover problems. We generalize their model to include other optimization problems, and apply the generalized framework to graph problems. Our goal is to define an abstract model that captures the intrinsic power and limitations of greedy algorithms for various graph optimization problems, as Borodin et al. (Algorithmica 37(4):295&#x2013;326, 2003) did for scheduling. We prove bounds on the approximation ratio achievable by such algorithms for basic graph problems such as shortest path, weighted vertex cover, Steiner tree, and independent set. For example, we show that, for the shortest path problem, no algorithm in the FIXED priority model can achieve any approximation ratio (even one dependent on the graph size), but the well-known Dijkstra&#x2019;s algorithm is an optimal ADAPTIVE priority algorithm. We also prove that the approximation ratio for weighted vertex cover achievable by ADAPTIVE priority algorithms is exactly&#x00a0;2. Here, a new lower bound matches the known upper bounds (Johnson in J. Comput. Syst. Sci. 9(3):256&#x2013;278, 1974). We give a number of other lower bounds for priority algorithms, as well as a new approximation algorithm for minimum Steiner tree problem with weights in the interval [1,2].", :doc-id "Models of Greedy Algorithms for Graph Problems. 2009  ,  "}, 3622817 #search_api.search_api.Paper{:id 3622817, :key "journals/mp/HagerPZ13", :title "An exact algorithm for graph partitioning.", :abstract nil, :author (#search_api.search_api.Author{:id 102556, :first-name nil, :last-name nil, :full-name "William W. Hager"} #search_api.search_api.Author{:id 1583763, :first-name nil, :last-name nil, :full-name "Dzung T. Phan"} #search_api.search_api.Author{:id 478010, :first-name nil, :last-name nil, :full-name "Hongchao Zhang"}), :year 2013, :venue "Math. Program.", :ncit 0, :string "An exact algorithm for graph partitioning.. ", :doc-id "An exact algorithm for graph partitioning. 2013  ,  ,  "}, 1033410 #search_api.search_api.Paper{:id 1033410, :key "journals/pami/WykDW02", :title "A RKHS Interpolator-Based Graph Matching Algorithm.", :abstract "In this paper, we present a novel algorithm for performing attributed graph matching. This algorithm is derived from a generalized framework for describing functionally expanded interpolators which is based on the theory of reproducing kernel Hilbert spaces. The algorithm incorporates a general approach to a wide class of graph matching problems based on attributed graphs, allowing the structure of the graphs to be based on multiple sets of attributes. No assumption is made about the adjacency structure of the graphs to be matched.", :author (#search_api.search_api.Author{:id 130343, :first-name nil, :last-name nil, :full-name "MichaÃ«l A. van Wyk"} #search_api.search_api.Author{:id 930897, :first-name nil, :last-name nil, :full-name "Tariq S. Durrani"} #search_api.search_api.Author{:id 1495179, :first-name nil, :last-name nil, :full-name "Barend J. van Wyk"}), :year 2002, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 53, :string "A RKHS Interpolator-Based Graph Matching Algorithm.. In this paper, we present a novel algorithm for performing attributed graph matching. This algorithm is derived from a generalized framework for describing functionally expanded interpolators which is based on the theory of reproducing kernel Hilbert spaces. The algorithm incorporates a general approach to a wide class of graph matching problems based on attributed graphs, allowing the structure of the graphs to be based on multiple sets of attributes. No assumption is made about the adjacency structure of the graphs to be matched.", :doc-id "A RKHS Interpolator-Based Graph Matching Algorithm. 2002  ,  ,  "}, 904418 #search_api.search_api.Paper{:id 904418, :key "journals/ijar/StudenyV09", :title "A reconstruction algorithm for the essential graph.", :abstract "A standard graphical representative of a Bayesian network structure is a special chain graph, known as an essential graph. An alternative algebraic approach to the mathematical description of this statistical model uses instead a certain integer-valued vector, known as a standard imset. We give a direct formula for the translation of any chain graph describing a Bayesian network structure into the standard imset. Moreover, we present a two-stage algorithm which makes it possible to reconstruct the essential graph on the basis of the standard imset. The core of this paper is the proof of the correctness of the algorithm.", :author (#search_api.search_api.Author{:id 953007, :first-name nil, :last-name nil, :full-name "Milan StudenÃ½"} #search_api.search_api.Author{:id 1538929, :first-name nil, :last-name nil, :full-name "JirÃ­ Vomlel"}), :year 2009, :venue "Int. J. Approx. Reasoning", :ncit 0, :string "A reconstruction algorithm for the essential graph.. A standard graphical representative of a Bayesian network structure is a special chain graph, known as an essential graph. An alternative algebraic approach to the mathematical description of this statistical model uses instead a certain integer-valued vector, known as a standard imset. We give a direct formula for the translation of any chain graph describing a Bayesian network structure into the standard imset. Moreover, we present a two-stage algorithm which makes it possible to reconstruct the essential graph on the basis of the standard imset. The core of this paper is the proof of the correctness of the algorithm.", :doc-id "A reconstruction algorithm for the essential graph. 2009  ,  "}, 2973474 #search_api.search_api.Paper{:id 2973474, :key "journals/jcss/MyrvoldK11", :title "Errors in graph embedding algorithms.", :abstract nil, :author (#search_api.search_api.Author{:id 54014, :first-name nil, :last-name nil, :full-name "Wendy Myrvold"} #search_api.search_api.Author{:id 23057, :first-name nil, :last-name nil, :full-name "William Kocay"}), :year 2011, :venue "J. Comput. Syst. Sci.", :ncit 1, :string "Errors in graph embedding algorithms.. ", :doc-id "Errors in graph embedding algorithms. 2011  ,  "}, 3735490 #search_api.search_api.Paper{:id 3735490, :key "journals/siamcomp/SpielmanT13", :title "A Local Clustering Algorithm for Massive Graphs and Its Application to Nearly Linear Time Graph Partitioning.", :abstract nil, :author (#search_api.search_api.Author{:id 541665, :first-name nil, :last-name nil, :full-name "Daniel A. Spielman"} #search_api.search_api.Author{:id 907308, :first-name nil, :last-name nil, :full-name "Shang-Hua Teng"}), :year 2013, :venue "SIAM J. Comput.", :ncit 0, :string "A Local Clustering Algorithm for Massive Graphs and Its Application to Nearly Linear Time Graph Partitioning.. ", :doc-id "A Local Clustering Algorithm for Massive Graphs and Its Application to Nearly Linear Time Graph Partitioning. 2013  ,  "}, 3271843 #search_api.search_api.Paper{:id 3271843, :key "reference/parallel/BaderC11", :title "Graph Algorithms.", :abstract nil, :author (#search_api.search_api.Author{:id 172599, :first-name nil, :last-name nil, :full-name "David A. Bader"} #search_api.search_api.Author{:id 338543, :first-name nil, :last-name nil, :full-name "Guojing Cong"}), :year 2011, :venue "Encyclopedia of Parallel Computing", :ncit 0, :string "Graph Algorithms.. ", :doc-id "Graph Algorithms. 2011  ,  "}, 1310275 #search_api.search_api.Paper{:id 1310275, :key "conf/wg/KatzRW09", :title "An Algorithmic Study of Switch Graphs.", :abstract "We derive a variety of results on the algorithmics of switch graphs. On the negative side we prove hardness of the following problems: Given a switch graph, does it possess a bipartite / planar / triangle-free / Eulerian configuration? On the positive side we design fast algorithms for several connectivity problems in undirected switch graphs, and for recognizing acyclic configurations in directed switch graphs.", :author (#search_api.search_api.Author{:id 1071085, :first-name nil, :last-name nil, :full-name "Bastian Katz"} #search_api.search_api.Author{:id 1382625, :first-name nil, :last-name nil, :full-name "Ignaz Rutter"} #search_api.search_api.Author{:id 273364, :first-name nil, :last-name nil, :full-name "Gerhard J. Woeginger"}), :year 2009, :venue "WG", :ncit 6, :string "An Algorithmic Study of Switch Graphs.. We derive a variety of results on the algorithmics of switch graphs. On the negative side we prove hardness of the following problems: Given a switch graph, does it possess a bipartite / planar / triangle-free / Eulerian configuration? On the positive side we design fast algorithms for several connectivity problems in undirected switch graphs, and for recognizing acyclic configurations in directed switch graphs.", :doc-id "An Algorithmic Study of Switch Graphs. 2009  ,  ,  "}, 950883 #search_api.search_api.Paper{:id 950883, :key "journals/jacm/Kleinberg99", :title "Authoritative Sources in a Hyperlinked Environment.", :abstract "The network structure of a hyperlinked environment can be a rich source of information about the content of the environment, provided we have effective means for understanding it. We develop a set of algorithmic tools for extracting information from the link structures of such environments, and report on experiments that demonstrate their effectiveness in a variety of context on the World Wide Web. The central issue we address within our framework is the distillation of broad search topics, through the discovery of &ldquo;authorative&rdquo; information sources on such topics. We propose and test an algorithmic formulation of the notion of authority, based on the relationship between a set of relevant authoritative pages and the set of &ldquo;hub pages&rdquo; that join them together in the link structure. Our formulation has connections to the eigenvectors of certain matrices associated with the link graph; these connections in turn motivate additional heuristrics for link-based analysis.", :author (#search_api.search_api.Author{:id 386117, :first-name nil, :last-name nil, :full-name "Jon M. Kleinberg"}), :year 1999, :venue "J. ACM", :ncit 7636, :string "Authoritative Sources in a Hyperlinked Environment.. The network structure of a hyperlinked environment can be a rich source of information about the content of the environment, provided we have effective means for understanding it. We develop a set of algorithmic tools for extracting information from the link structures of such environments, and report on experiments that demonstrate their effectiveness in a variety of context on the World Wide Web. The central issue we address within our framework is the distillation of broad search topics, through the discovery of &ldquo;authorative&rdquo; information sources on such topics. We propose and test an algorithmic formulation of the notion of authority, based on the relationship between a set of relevant authoritative pages and the set of &ldquo;hub pages&rdquo; that join them together in the link structure. Our formulation has connections to the eigenvectors of certain matrices associated with the link graph; these connections in turn motivate additional heuristrics for link-based analysis.", :doc-id "Authoritative Sources in a Hyperlinked Environment. 1999  "}, 2921668 #search_api.search_api.Paper{:id 2921668, :key "journals/iandc/MetivierRSZ10", :title "About randomised distributed graph colouring and graph partition algorithms.", :abstract nil, :author (#search_api.search_api.Author{:id 189605, :first-name nil, :last-name nil, :full-name "Yves MÃ©tivier"} #search_api.search_api.Author{:id 697964, :first-name nil, :last-name nil, :full-name "John Michael Robson"} #search_api.search_api.Author{:id 101032, :first-name nil, :last-name nil, :full-name "Nasser Saheb-Djahromi"} #search_api.search_api.Author{:id 1519256, :first-name nil, :last-name nil, :full-name "Akka Zemmari"}), :year 2010, :venue "Inf. Comput.", :ncit 3, :string "About randomised distributed graph colouring and graph partition algorithms.. ", :doc-id "About randomised distributed graph colouring and graph partition algorithms. 2010  ,  ,  ,  "}, 1033412 #search_api.search_api.Paper{:id 1033412, :key "journals/pami/WykW04", :title "A POCS-Based Graph Matching Algorithm.", :abstract "A novel Projections Onto Convex Sets (POCS) graph matching algorithm is presented. Two-way assignment constraints are enforced without using elaborate penalty terms, graduated nonconvexity, or sophisticated annealing mechanisms to escape from poor local minima. Results indicate that the presented algorithm is robust and compares favorably to other well-known algorithms.", :author (#search_api.search_api.Author{:id 1495179, :first-name nil, :last-name nil, :full-name "Barend J. van Wyk"} #search_api.search_api.Author{:id 130343, :first-name nil, :last-name nil, :full-name "MichaÃ«l A. van Wyk"}), :year 2004, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 39, :string "A POCS-Based Graph Matching Algorithm.. A novel Projections Onto Convex Sets (POCS) graph matching algorithm is presented. Two-way assignment constraints are enforced without using elaborate penalty terms, graduated nonconvexity, or sophisticated annealing mechanisms to escape from poor local minima. Results indicate that the presented algorithm is robust and compares favorably to other well-known algorithms.", :doc-id "A POCS-Based Graph Matching Algorithm. 2004  ,  "}, 542854 #search_api.search_api.Paper{:id 542854, :key "conf/pldi/SmithRH04", :title "A generalized algorithm for graph-coloring register allocation.", :abstract "Graph-coloring register allocation is an elegant and extremely popular optimization for modern machines. But as currently formulated, it does not handle two characteristics commonly found in commercial architectures. First, a single register name may appear in multiple register classes, where a class is a set of register names that are interchangeable in a particular role. Second, multiple register names may be aliases for a single hardware register. We present a generalization of graph-coloring register allocation that handles these problematic characteristics while preserving the elegance and practicality of traditional graph coloring. Our generalization adapts easily to a new target machine, requiring only the sets of names in the register classes and a map of the register aliases. It also drops easily into a well-known graph-coloring allocator, is efficient at compile time, and produces high-quality code.", :author (#search_api.search_api.Author{:id 474496, :first-name nil, :last-name nil, :full-name "Michael D. Smith"} #search_api.search_api.Author{:id 123023, :first-name nil, :last-name nil, :full-name "Norman Ramsey"} #search_api.search_api.Author{:id 802288, :first-name nil, :last-name nil, :full-name "Glenn H. Holloway"}), :year 2004, :venue "PLDI", :ncit 73, :string "A generalized algorithm for graph-coloring register allocation.. Graph-coloring register allocation is an elegant and extremely popular optimization for modern machines. But as currently formulated, it does not handle two characteristics commonly found in commercial architectures. First, a single register name may appear in multiple register classes, where a class is a set of register names that are interchangeable in a particular role. Second, multiple register names may be aliases for a single hardware register. We present a generalization of graph-coloring register allocation that handles these problematic characteristics while preserving the elegance and practicality of traditional graph coloring. Our generalization adapts easily to a new target machine, requiring only the sets of names in the register classes and a map of the register aliases. It also drops easily into a well-known graph-coloring allocator, is efficient at compile time, and produces high-quality code.", :doc-id "A generalized algorithm for graph-coloring register allocation. 2004  ,  ,  "}, 2817190 #search_api.search_api.Paper{:id 2817190, :key "conf/stoc/KawarabayashiW10", :title "A shorter proof of the graph minor algorithm: the unique linkage theorem.", :abstract "At the core of the seminal Graph Minor Theory of Robertson and Seymour is a powerful theorem which describes the structure of graphs excluding a fixed minor. This result is used to prove Wagner's conjecture and provide a polynomial time algorithm for the disjoint paths problem when the number of the terminals is fixed (i.e, the Graph Minor Algorithm). However, both results require the full power of the Graph Minor Theory, i.e, the structure theorem. In this paper, we show that this is not true in the latter case. Namely, we provide a new and much simpler proof of the correctness of the Graph Minor Algorithm. Specifically, we prove the \"Unique Linkage Theorem\" without using Graph Minors structure theorem. The new argument, in addition to being simpler, is much shorter, cutting the proof by at least 200 pages. We also give a new full proof of correctness of an algorithm for the well-known edge-disjoint paths problem when the number of the terminals is fixed, which is at most 25 pages long.", :author (#search_api.search_api.Author{:id 663176, :first-name nil, :last-name nil, :full-name "Ken-ichi Kawarabayashi"} #search_api.search_api.Author{:id 213394, :first-name nil, :last-name nil, :full-name "Paul Wollan"}), :year 2010, :venue "STOC", :ncit 28, :string "A shorter proof of the graph minor algorithm: the unique linkage theorem.. At the core of the seminal Graph Minor Theory of Robertson and Seymour is a powerful theorem which describes the structure of graphs excluding a fixed minor. This result is used to prove Wagner's conjecture and provide a polynomial time algorithm for the disjoint paths problem when the number of the terminals is fixed (i.e, the Graph Minor Algorithm). However, both results require the full power of the Graph Minor Theory, i.e, the structure theorem. In this paper, we show that this is not true in the latter case. Namely, we provide a new and much simpler proof of the correctness of the Graph Minor Algorithm. Specifically, we prove the \"Unique Linkage Theorem\" without using Graph Minors structure theorem. The new argument, in addition to being simpler, is much shorter, cutting the proof by at least 200 pages. We also give a new full proof of correctness of an algorithm for the well-known edge-disjoint paths problem when the number of the terminals is fixed, which is at most 25 pages long.", :doc-id "A shorter proof of the graph minor algorithm: the unique linkage theorem. 2010  ,  "}, 832551 #search_api.search_api.Paper{:id 832551, :key "journals/csur/Galil86", :title "Efficient Algorithms for Finding Maximum Matching in Graphs.", :abstract "This paper surveys the techniques used for designing the most efficient algorithms for finding a maximum cardinality or weighted matching in (general or bipartite) graphs. It also lists some open problems concerning possible improvements in existing algorithms and the existence of fast parallel algorithms for these problems.", :author (#search_api.search_api.Author{:id 136399, :first-name nil, :last-name nil, :full-name "Zvi Galil"}), :year 1986, :venue "ACM Comput. Surv.", :ncit 291, :string "Efficient Algorithms for Finding Maximum Matching in Graphs.. This paper surveys the techniques used for designing the most efficient algorithms for finding a maximum cardinality or weighted matching in (general or bipartite) graphs. It also lists some open problems concerning possible improvements in existing algorithms and the existence of fast parallel algorithms for these problems.", :doc-id "Efficient Algorithms for Finding Maximum Matching in Graphs. 1986  "}, 1078407 #search_api.search_api.Paper{:id 1078407, :key "journals/tc/Bryant86", :title "Graph-Based Algorithms for Boolean Function Manipulation.", :abstract "In this paper we present a new data structure for representing Boolean functions and an associated set of manipulation algorithms. Functions are represented by directed, acyclic graphs in a manner similar to the representations introduced by Lee [1] and Akers [2], but with further restrictions on the ordering of decision variables in the graph. Although a function requires, in the worst case, a graph of size exponential in the number of arguments, many of the functions encountered in typical applications have a more reasonable representation. Our algorithms have time complexity proportional to the sizes of the graphs being operated on, and hence are quite efficient as long as the graphs do not grow too large. We present experimental results from applying these algorithms to problems in logic design verification that demonstrate the practicality of our approach.", :author (#search_api.search_api.Author{:id 123178, :first-name nil, :last-name nil, :full-name "Randal E. Bryant"}), :year 1986, :venue "IEEE Trans. Computers", :ncit 8512, :string "Graph-Based Algorithms for Boolean Function Manipulation.. In this paper we present a new data structure for representing Boolean functions and an associated set of manipulation algorithms. Functions are represented by directed, acyclic graphs in a manner similar to the representations introduced by Lee [1] and Akers [2], but with further restrictions on the ordering of decision variables in the graph. Although a function requires, in the worst case, a graph of size exponential in the number of arguments, many of the functions encountered in typical applications have a more reasonable representation. Our algorithms have time complexity proportional to the sizes of the graphs being operated on, and hence are quite efficient as long as the graphs do not grow too large. We present experimental results from applying these algorithms to problems in logic design verification that demonstrate the practicality of our approach.", :doc-id "Graph-Based Algorithms for Boolean Function Manipulation. 1986  "}, 1031687 #search_api.search_api.Paper{:id 1031687, :key "journals/pami/GoldR96", :title "A Graduated Assignment Algorithm for Graph Matching.", :abstract "A graduated assignment algorithm for graph matching is presented which is fast and accurate even in the presence of high noise. By combining graduated nonconvexity, two-way (assignment) constraints, and sparsity, large improvements in accuracy and speed are achieved. Its low order computational complexity [O(lm), where l and m are the number of links in the two graphs] and robustness in the presence of noise offer advantages over traditional combinatorial approaches. The algorithm, not restricted to any special class of graph, is applied to subgraph isomorphism, weighted graph matching, and attributed relational graph matching. To illustrate the performance of the algorithm, attributed relational graphs derived from objects are matched. Then, results from twenty-five thousand experiments conducted on 100 node random graphs of varying types (graphs with only zero-one links, weighted graphs, and graphs with node attributes and multiple link types) are reported. No comparable results have been reported by any other graph matching algorithm before in the research literature. Twenty-five hundred control experiments are conducted using a relaxation labeling algorithm and large improvements in accuracy are demonstrated.", :author (#search_api.search_api.Author{:id 303957, :first-name nil, :last-name nil, :full-name "Steven Gold"} #search_api.search_api.Author{:id 743959, :first-name nil, :last-name nil, :full-name "Anand Rangarajan"}), :year 1996, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 771, :string "A Graduated Assignment Algorithm for Graph Matching.. A graduated assignment algorithm for graph matching is presented which is fast and accurate even in the presence of high noise. By combining graduated nonconvexity, two-way (assignment) constraints, and sparsity, large improvements in accuracy and speed are achieved. Its low order computational complexity [O(lm), where l and m are the number of links in the two graphs] and robustness in the presence of noise offer advantages over traditional combinatorial approaches. The algorithm, not restricted to any special class of graph, is applied to subgraph isomorphism, weighted graph matching, and attributed relational graph matching. To illustrate the performance of the algorithm, attributed relational graphs derived from objects are matched. Then, results from twenty-five thousand experiments conducted on 100 node random graphs of varying types (graphs with only zero-one links, weighted graphs, and graphs with node attributes and multiple link types) are reported. No comparable results have been reported by any other graph matching algorithm before in the research literature. Twenty-five hundred control experiments are conducted using a relaxation labeling algorithm and large improvements in accuracy are demonstrated.", :doc-id "A Graduated Assignment Algorithm for Graph Matching. 1996  ,  "}, 3080071 #search_api.search_api.Paper{:id 3080071, :key "journals/tcs/KorpelainenLMT11", :title "Boundary properties of graphs for algorithmic graph problems.", :abstract nil, :author (#search_api.search_api.Author{:id 98401, :first-name nil, :last-name nil, :full-name "Nicholas Korpelainen"} #search_api.search_api.Author{:id 80188, :first-name nil, :last-name nil, :full-name "Vadim V. Lozin"} #search_api.search_api.Author{:id 14124842, :first-name nil, :last-name nil, :full-name "Dmitriy S. Malyshev"} #search_api.search_api.Author{:id 31430, :first-name nil, :last-name nil, :full-name "Alexander Tiskin"}), :year 2011, :venue "Theor. Comput. Sci.", :ncit 2, :string "Boundary properties of graphs for algorithmic graph problems.. ", :doc-id "Boundary properties of graphs for algorithmic graph problems. 2011  ,  ,  ,  "}, 623305 #search_api.search_api.Paper{:id 623305, :key "conf/stoc/MooreRS07", :title "On the impossibility of a quantum sieve algorithm for graph isomorphism.", :abstract "It is known that any quantum algorithm for Graph Isomorphism thatworks within the framework of the hidden subgroup problem (HSP) must performhighly entangled measurements across Î©(n log n) coset states. One ofthe only known models for how such a measurement could be carried outefficiently is Kuperberg's algorithm for the HSP in the dihedral group, in whichquantum states are adaptively combined and measured according to thedecomposition of tensor products into irreducible representations. This \"quantum sieve\" starts with coset states, and works its way down towardsrepresentations whose probabilities differ depending on, for example, whetherthe hidden subgroup is trivial or nontrivial. In this paper we show that no such approach can produce a polynomial-time quantum algorithm for Graph Isomorphism. Specifically, we consider the natural reduction of Graph Isomorphism to the HSP over the the wreath product Sn à£€ Z2. Using a recently proved bound on the irreducible characters of Sn, we show that no algorithm in this family can solve Graph Isomorphism in less than eÎ©(âˆšn) time, no matter what adaptive rule it uses to select and combine quantum states. In particular, algorithms of this type can offer essentially no improvement over the best known classical algorithms, which run in time eO(âˆš(n log n)).", :author (#search_api.search_api.Author{:id 531603, :first-name nil, :last-name nil, :full-name "Cristopher Moore"} #search_api.search_api.Author{:id 486776, :first-name nil, :last-name nil, :full-name "Alexander Russell"} #search_api.search_api.Author{:id 942958, :first-name nil, :last-name nil, :full-name "Piotr Sniady"}), :year 2007, :venue "STOC", :ncit 33, :string "On the impossibility of a quantum sieve algorithm for graph isomorphism.. It is known that any quantum algorithm for Graph Isomorphism thatworks within the framework of the hidden subgroup problem (HSP) must performhighly entangled measurements across Î©(n log n) coset states. One ofthe only known models for how such a measurement could be carried outefficiently is Kuperberg's algorithm for the HSP in the dihedral group, in whichquantum states are adaptively combined and measured according to thedecomposition of tensor products into irreducible representations. This \"quantum sieve\" starts with coset states, and works its way down towardsrepresentations whose probabilities differ depending on, for example, whetherthe hidden subgroup is trivial or nontrivial. In this paper we show that no such approach can produce a polynomial-time quantum algorithm for Graph Isomorphism. Specifically, we consider the natural reduction of Graph Isomorphism to the HSP over the the wreath product Sn à£€ Z2. Using a recently proved bound on the irreducible characters of Sn, we show that no algorithm in this family can solve Graph Isomorphism in less than eÎ©(âˆšn) time, no matter what adaptive rule it uses to select and combine quantum states. In particular, algorithms of this type can offer essentially no improvement over the best known classical algorithms, which run in time eO(âˆš(n log n)).", :doc-id "On the impossibility of a quantum sieve algorithm for graph isomorphism. 2007  ,  ,  "}, 952009 #search_api.search_api.Paper{:id 952009, :key "journals/jacm/BorradaileK09", :title "An ( log ) algorithm for maximum -flow in a directed planar graph.", :abstract "We give the first correct O(n log n) algorithm for finding a maximum st-flow in a directed planar graph. After a preprocessing step that consists in finding single-source shortest-path distances in the dual, the algorithm consists of repeatedly saturating the leftmost residual s-to-t path.", :author (#search_api.search_api.Author{:id 751329, :first-name nil, :last-name nil, :full-name "Glencora Borradaile"} #search_api.search_api.Author{:id 600882, :first-name nil, :last-name nil, :full-name "Philip N. Klein"}), :year 2009, :venue "J. ACM", :ncit 0, :string "An ( log ) algorithm for maximum -flow in a directed planar graph.. We give the first correct O(n log n) algorithm for finding a maximum st-flow in a directed planar graph. After a preprocessing step that consists in finding single-source shortest-path distances in the dual, the algorithm consists of repeatedly saturating the leftmost residual s-to-t path.", :doc-id "An ( log ) algorithm for maximum -flow in a directed planar graph. 2009  ,  "}, 1031977 #search_api.search_api.Paper{:id 1031977, :key "journals/pami/JiangMB01", :title "On Median Graphs: Properties, Algorithms, and Applications.", :abstract "In object prototype learning and similar tasks, median computation is an important technique for capturing the essential information of a given set of patterns. In this paper, we extend the median concept to the domain of graphs. In terms of graph distance, we introduce the novel concepts of set median and generalized median of a set of graphs. We study properties of both types of median graphs. For the more complex task of computing generalized median graphs, a genetic search algorithm is developed. Experiments conducted on randomly generated graphs demonstrate the advantage of generalized median graphs compared to set median graphs and the ability of our genetic algorithm to find approximate generalized median graphs in reasonable time. Application examples with both synthetic and nonsynthetic data are shown to illustrate the practical usefulness of the concept of median graphs.", :author (#search_api.search_api.Author{:id 415157, :first-name nil, :last-name nil, :full-name "Xiaoyi Jiang"} #search_api.search_api.Author{:id 1246835, :first-name nil, :last-name nil, :full-name "Andreas MÃ¼nger"} #search_api.search_api.Author{:id 1493079, :first-name nil, :last-name nil, :full-name "Horst Bunke"}), :year 2001, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 195, :string "On Median Graphs: Properties, Algorithms, and Applications.. In object prototype learning and similar tasks, median computation is an important technique for capturing the essential information of a given set of patterns. In this paper, we extend the median concept to the domain of graphs. In terms of graph distance, we introduce the novel concepts of set median and generalized median of a set of graphs. We study properties of both types of median graphs. For the more complex task of computing generalized median graphs, a genetic search algorithm is developed. Experiments conducted on randomly generated graphs demonstrate the advantage of generalized median graphs compared to set median graphs and the ability of our genetic algorithm to find approximate generalized median graphs in reasonable time. Application examples with both synthetic and nonsynthetic data are shown to illustrate the practical usefulness of the concept of median graphs.", :doc-id "On Median Graphs: Properties, Algorithms, and Applications. 2001  ,  ,  "}, 494762 #search_api.search_api.Paper{:id 494762, :key "conf/mfcs/Sankowski08", :title "Algebraic Graph Algorithms.", :abstract "The aim of this paper is to survey the results on dynamic algebraic algorithms, with main interest in matrix functions such as, determinant, inverse, rank and characteristic polynomial. First of all we summary the papers that in dynamic setup these problems can be solved faster than evaluating everything from scratch. The static complexity of these problem equals the matrix multiplication complexity, whereas the presented solutions work in subquadratic or quadratic (characteristic polynomial) time in the worst case. The dynamic matrix computations can be used to solve the following graphs problems in dynamic setup: computing transitive closure, computing shortest paths lengths, computing maximum matching size and computing vertex connectivity. For all of these problem the dynamic approach lead to the first known subquadratic algorithms. Astonishingly, the dynamic matrix algorithms can be used to obtain efficient static algorithms for the perfect matching problem as well. Using the O(n 2) algorithms for the dynamic matrix inverse, one can obtain a very simple randomized algorithm for computing perfect matchings in O(n 3) time. When the fast matrix multiplication is used, the complexity of this algorithm can be improved to O(n Â¿ ) time, where Â¿ is the exponent of the best known matrix multiplication algorithm. Since Â¿< 2.38, this algorithm breaks through the O(n 2.5) barrier for the matching problem. The interplay between algebraic algorithms and graphs problems can be explored even further in order to obtain O(Wn Â¿ ) time algorithms for single source shortest paths problem and weighted bipartite matching problem.", :author (#search_api.search_api.Author{:id 712123, :first-name nil, :last-name nil, :full-name "Piotr Sankowski"}), :year 2008, :venue "MFCS", :ncit 2, :string "Algebraic Graph Algorithms.. The aim of this paper is to survey the results on dynamic algebraic algorithms, with main interest in matrix functions such as, determinant, inverse, rank and characteristic polynomial. First of all we summary the papers that in dynamic setup these problems can be solved faster than evaluating everything from scratch. The static complexity of these problem equals the matrix multiplication complexity, whereas the presented solutions work in subquadratic or quadratic (characteristic polynomial) time in the worst case. The dynamic matrix computations can be used to solve the following graphs problems in dynamic setup: computing transitive closure, computing shortest paths lengths, computing maximum matching size and computing vertex connectivity. For all of these problem the dynamic approach lead to the first known subquadratic algorithms. Astonishingly, the dynamic matrix algorithms can be used to obtain efficient static algorithms for the perfect matching problem as well. Using the O(n 2) algorithms for the dynamic matrix inverse, one can obtain a very simple randomized algorithm for computing perfect matchings in O(n 3) time. When the fast matrix multiplication is used, the complexity of this algorithm can be improved to O(n Â¿ ) time, where Â¿ is the exponent of the best known matrix multiplication algorithm. Since Â¿< 2.38, this algorithm breaks through the O(n 2.5) barrier for the matching problem. The interplay between algebraic algorithms and graphs problems can be explored even further in order to obtain O(Wn Â¿ ) time algorithms for single source shortest paths problem and weighted bipartite matching problem.", :doc-id "Algebraic Graph Algorithms. 2008  "}, 610922 #search_api.search_api.Paper{:id 610922, :key "conf/soda/Kleinberg98", :title "Authoritative Sources in a Hyperlinked Environment.", :abstract "The network structure of a hyperlinked environment can be a rich source of information about the content of the environment, provided we have effective means for understanding it. We develop a set of algorithmic tools for extracting information from the link structures of such environments, and report on experiments that demonstrate their effectiveness in a variety of context on the World Wide Web. The central issue we address within our framework is the distillation of broad search topics, through the discovery of &ldquo;authorative&rdquo; information sources on such topics. We propose and test an algorithmic formulation of the notion of authority, based on the relationship between a set of relevant authoritative pages and the set of &ldquo;hub pages&rdquo; that join them together in the link structure. Our formulation has connections to the eigenvectors of certain matrices associated with the link graph; these connections in turn motivate additional heuristrics for link-based analysis.", :author (#search_api.search_api.Author{:id 386117, :first-name nil, :last-name nil, :full-name "Jon M. Kleinberg"}), :year 1998, :venue "SODA", :ncit 7636, :string "Authoritative Sources in a Hyperlinked Environment.. The network structure of a hyperlinked environment can be a rich source of information about the content of the environment, provided we have effective means for understanding it. We develop a set of algorithmic tools for extracting information from the link structures of such environments, and report on experiments that demonstrate their effectiveness in a variety of context on the World Wide Web. The central issue we address within our framework is the distillation of broad search topics, through the discovery of &ldquo;authorative&rdquo; information sources on such topics. We propose and test an algorithmic formulation of the notion of authority, based on the relationship between a set of relevant authoritative pages and the set of &ldquo;hub pages&rdquo; that join them together in the link structure. Our formulation has connections to the eigenvectors of certain matrices associated with the link graph; these connections in turn motivate additional heuristrics for link-based analysis.", :doc-id "Authoritative Sources in a Hyperlinked Environment. 1998  "}, 951018 #search_api.search_api.Paper{:id 951018, :key "journals/jacm/Lehot74", :title "An Optimal Algorithm to Detect a Line Graph and Output Its Root Graph.", :abstract "Given a graph H with E edges and N nodes, a graph G is sought such that H is the line graph of G, if G exists. The algorithm does this within the order of E steps, in fact in E + O(N) steps. This algorithm is optimal in its complexity.", :author (#search_api.search_api.Author{:id 191965, :first-name nil, :last-name nil, :full-name "Philippe G. H. Lehot"}), :year 1974, :venue "J. ACM", :ncit 93, :string "An Optimal Algorithm to Detect a Line Graph and Output Its Root Graph.. Given a graph H with E edges and N nodes, a graph G is sought such that H is the line graph of G, if G exists. The algorithm does this within the order of E steps, in fact in E + O(N) steps. This algorithm is optimal in its complexity.", :doc-id "An Optimal Algorithm to Detect a Line Graph and Output Its Root Graph. 1974  "}, 1119499 #search_api.search_api.Paper{:id 1119499, :key "journals/tog/RotherKB04", :title "\"GrabCut\": interactive foreground extraction using iterated graph cuts.", :abstract "The problem of efficient, interactive foreground/background segmentation in still images is of great practical importance in image editing. Classical image segmentation tools use either texture (colour) information, e.g. Magic Wand, or edge (contrast) information, e.g. Intelligent Scissors. Recently, an approach based on optimization by graph-cut has been developed which successfully combines both types of information. In this paper we extend the graph-cut approach in three respects. First, we have developed a more powerful, iterative version of the optimisation. Secondly, the power of the iterative algorithm is used to simplify substantially the user interaction needed for a given quality of result. Thirdly, a robust algorithm for \"border matting\" has been developed to estimate simultaneously the alpha-matte around an object boundary and the colours of foreground pixels. We show that for moderately difficult examples the proposed method outperforms competitive tools.", :author (#search_api.search_api.Author{:id 518232, :first-name nil, :last-name nil, :full-name "Carsten Rother"} #search_api.search_api.Author{:id 1374447, :first-name nil, :last-name nil, :full-name "Vladimir Kolmogorov"} #search_api.search_api.Author{:id 984684, :first-name nil, :last-name nil, :full-name "Andrew Blake"}), :year 2004, :venue "ACM Trans. Graph.", :ncit 1930, :string "\"GrabCut\": interactive foreground extraction using iterated graph cuts.. The problem of efficient, interactive foreground/background segmentation in still images is of great practical importance in image editing. Classical image segmentation tools use either texture (colour) information, e.g. Magic Wand, or edge (contrast) information, e.g. Intelligent Scissors. Recently, an approach based on optimization by graph-cut has been developed which successfully combines both types of information. In this paper we extend the graph-cut approach in three respects. First, we have developed a more powerful, iterative version of the optimisation. Secondly, the power of the iterative algorithm is used to simplify substantially the user interaction needed for a given quality of result. Thirdly, a robust algorithm for \"border matting\" has been developed to estimate simultaneously the alpha-matte around an object boundary and the colours of foreground pixels. We show that for moderately difficult examples the proposed method outperforms competitive tools.", :doc-id "\"GrabCut\": interactive foreground extraction using iterated graph cuts. 2004  ,  ,  "}, 3077547 #search_api.search_api.Paper{:id 3077547, :key "journals/pami/FelzenszwalbZ11", :title "Dynamic Programming and Graph Algorithms in Computer Vision.", :abstract nil, :author (#search_api.search_api.Author{:id 22704, :first-name nil, :last-name nil, :full-name "Pedro F. Felzenszwalb"} #search_api.search_api.Author{:id 367053, :first-name nil, :last-name nil, :full-name "Ramin Zabih"}), :year 2011, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 40, :string "Dynamic Programming and Graph Algorithms in Computer Vision.. ", :doc-id "Dynamic Programming and Graph Algorithms in Computer Vision. 2011  ,  "}, 2862795 #search_api.search_api.Paper{:id 2862795, :key "journals/jair/MateescuKGD10", :title "Join-Graph Propagation Algorithms.", :abstract "The paper investigates parameterized approximate message-passing schemes that are based on bounded inference and are inspired by Pearl's belief propagation algorithm (BP). We start with the bounded inference mini-clustering algorithm and then move to the iterative scheme called Iterative Join-Graph Propagation (IJGP), that combines both iteration and bounded inference. Algorithm IJGP belongs to the class of Generalized Belief Propagation algorithms, a framework that allowed connections with approximate algorithms from statistical physics and is shown empirically to surpass the performance of mini-clustering and belief propagation, as well as a number of other state-of-the-art algorithms on several classes of networks. We also provide insight into the accuracy of iterative BP and IJGP by relating these algorithms to well known classes of constraint propagation schemes", :author (#search_api.search_api.Author{:id 256596, :first-name nil, :last-name nil, :full-name "Robert Mateescu"} #search_api.search_api.Author{:id 1424315, :first-name nil, :last-name nil, :full-name "Kalev Kask"} #search_api.search_api.Author{:id 61990, :first-name nil, :last-name nil, :full-name "Vibhav Gogate"} #search_api.search_api.Author{:id 1372556, :first-name nil, :last-name nil, :full-name "Rina Dechter"}), :year 2010, :venue "J. Artif. Intell. Res. (JAIR)", :ncit 17, :string "Join-Graph Propagation Algorithms.. The paper investigates parameterized approximate message-passing schemes that are based on bounded inference and are inspired by Pearl's belief propagation algorithm (BP). We start with the bounded inference mini-clustering algorithm and then move to the iterative scheme called Iterative Join-Graph Propagation (IJGP), that combines both iteration and bounded inference. Algorithm IJGP belongs to the class of Generalized Belief Propagation algorithms, a framework that allowed connections with approximate algorithms from statistical physics and is shown empirically to surpass the performance of mini-clustering and belief propagation, as well as a number of other state-of-the-art algorithms on several classes of networks. We also provide insight into the accuracy of iterative BP and IJGP by relating these algorithms to well known classes of constraint propagation schemes", :doc-id "Join-Graph Propagation Algorithms. 2010  ,  ,  ,  "}, 953421 #search_api.search_api.Paper{:id 953421, :key "journals/jal/NikolopoulosP04", :title "Parallel algorithms for P-comparability graphs.", :abstract "We consider two problems pertaining to P4-comparability graphs, namely, the problem of recognizing whether a simple undirected graph is a P4-comparability graph and the problem of producing an acyclic P4-transitive orientation of such a graph. Sequential algorithms for these problems have been presented by HoÃ ng and Reed and very recently by Raschle and Simon, and by Nikolopoulos and Palios. In this paper, we establish properties of P4-comparability graphs which allow us to describe parallel algorithms for the recognition and orientation problems on this class of graphs; for a graph on n vertices and m edges, our algorithms run in O(log2n) time and require O(nm/log n) processors on the CREW PRAM model. Since the currently fastest sequential algorithms for these problems run in O(nm) time, our algorithms are cost-efficient; moreover, to the best of our knowledge, this is the first attempt to introduce parallelization in problems involving P4-comparability graphs. Our approach relies on the parallel computation and proper orientation, the P4-components of the input graph.", :author (#search_api.search_api.Author{:id 406613, :first-name nil, :last-name nil, :full-name "Stavros D. Nikolopoulos"} #search_api.search_api.Author{:id 1436962, :first-name nil, :last-name nil, :full-name "Leonidas Palios"}), :year 2004, :venue "J. Algorithms", :ncit 1, :string "Parallel algorithms for P-comparability graphs.. We consider two problems pertaining to P4-comparability graphs, namely, the problem of recognizing whether a simple undirected graph is a P4-comparability graph and the problem of producing an acyclic P4-transitive orientation of such a graph. Sequential algorithms for these problems have been presented by HoÃ ng and Reed and very recently by Raschle and Simon, and by Nikolopoulos and Palios. In this paper, we establish properties of P4-comparability graphs which allow us to describe parallel algorithms for the recognition and orientation problems on this class of graphs; for a graph on n vertices and m edges, our algorithms run in O(log2n) time and require O(nm/log n) processors on the CREW PRAM model. Since the currently fastest sequential algorithms for these problems run in O(nm) time, our algorithms are cost-efficient; moreover, to the best of our knowledge, this is the first attempt to introduce parallelization in problems involving P4-comparability graphs. Our approach relies on the parallel computation and proper orientation, the P4-components of the input graph.", :doc-id "Parallel algorithms for P-comparability graphs. 2004  ,  "}, 951789 #search_api.search_api.Paper{:id 951789, :key "journals/jacm/Wang74", :title "An Algorithm for the Chromatic Number of a Graph.", :abstract "Christofides' algorithm for finding the chromatic number of a graph is improved both in speed and memory space by using a depth-first search rule to search for a shortest path in a reduced subgraph tree.", :author (#search_api.search_api.Author{:id 585797, :first-name nil, :last-name nil, :full-name "Chung C. Wang"}), :year 1974, :venue "J. ACM", :ncit 24, :string "An Algorithm for the Chromatic Number of a Graph.. Christofides' algorithm for finding the chromatic number of a graph is improved both in speed and memory space by using a depth-first search rule to search for a shortest path in a reduced subgraph tree.", :doc-id "An Algorithm for the Chromatic Number of a Graph. 1974  "}, 1031246 #search_api.search_api.Paper{:id 1031246, :key "journals/pami/BoykovK04", :title "An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Vision.", :abstract "After [15], [31], [19], [8], [25], [5], minimum cut/maximum flow algorithms on graphs emerged as an increasingly useful tool for exact or approximate energy minimization in low-level vision. The combinatorial optimization literature provides many min-cut/max-flow algorithms with different polynomial time complexity. Their practical efficiency, however, has to date been studied mainly outside the scope of computer vision. The goal of this paper is to provide an experimental comparison of the efficiency of min-cut/max flow algorithms for applications in vision. We compare the running times of several standard algorithms, as well as a new algorithm that we have recently developed. The algorithms we study include both Goldberg-Tarjan style \"push-relabelÂ¿ methods and algorithms based on Ford-Fulkerson style \"augmenting paths.Â¿ We benchmark these algorithms on a number of typical graphs in the contexts of image restoration, stereo, and segmentation. In many cases, our new algorithm works several times faster than any of the other methods, making near real--time performance possible. An implementation of our max-flow/min-cut algorithm is available upon request for research purposes.", :author (#search_api.search_api.Author{:id 1303286, :first-name nil, :last-name nil, :full-name "Yuri Boykov"} #search_api.search_api.Author{:id 1374447, :first-name nil, :last-name nil, :full-name "Vladimir Kolmogorov"}), :year 2004, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 2234, :string "An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Vision.. After [15], [31], [19], [8], [25], [5], minimum cut/maximum flow algorithms on graphs emerged as an increasingly useful tool for exact or approximate energy minimization in low-level vision. The combinatorial optimization literature provides many min-cut/max-flow algorithms with different polynomial time complexity. Their practical efficiency, however, has to date been studied mainly outside the scope of computer vision. The goal of this paper is to provide an experimental comparison of the efficiency of min-cut/max flow algorithms for applications in vision. We compare the running times of several standard algorithms, as well as a new algorithm that we have recently developed. The algorithms we study include both Goldberg-Tarjan style \"push-relabelÂ¿ methods and algorithms based on Ford-Fulkerson style \"augmenting paths.Â¿ We benchmark these algorithms on a number of typical graphs in the contexts of image restoration, stereo, and segmentation. In many cases, our new algorithm works several times faster than any of the other methods, making near real--time performance possible. An implementation of our max-flow/min-cut algorithm is available upon request for research purposes.", :doc-id "An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Vision. 2004  ,  "}, 832718 #search_api.search_api.Paper{:id 832718, :key "journals/csur/KwokA99", :title "Static scheduling algorithms for allocating directed task graphs to multiprocessors.", :abstract "Static scheduling of a program represented by a directed task graph on a multiprocessor system to minimize the program completion time is a well-known problem in parallel processing. Since finding an optimal schedule is an NP-complete problem in general, researchers have resorted to devising efficient heuristics. A plethora of heuristics have been proposed based on a wide spectrum of techniques, including branch-and-bound, integer-programming, searching, graph-theory, randomization, genetic algorithms, and evolutionary methods. The objective of this survey is to describe various scheduling algorithms and their functionalities in a contrasting fashion as well as examine their relative merits in terms of performance and time-complexity. Since these algorithms are based on diverse assumptions, they differ in their functionalities, and hence are difficult to describe in a unified context. We propose a taxonomy that classifies these algorithms into different categories. We consider 27 scheduling algorithms, with each algorithm explained through an easy-to-understand description followed by an illustrative example to demonstrate its operation. We also outline some of the novel and promising optimization approaches and current research trends in the area. Finally, we give an overview of the software tools that provide scheduling/mapping functionalities.", :author (#search_api.search_api.Author{:id 429450, :first-name nil, :last-name nil, :full-name "Yu-Kwong Kwok"} #search_api.search_api.Author{:id 890252, :first-name nil, :last-name nil, :full-name "Ishfaq Ahmad"}), :year 1999, :venue "ACM Comput. Surv.", :ncit 812, :string "Static scheduling algorithms for allocating directed task graphs to multiprocessors.. Static scheduling of a program represented by a directed task graph on a multiprocessor system to minimize the program completion time is a well-known problem in parallel processing. Since finding an optimal schedule is an NP-complete problem in general, researchers have resorted to devising efficient heuristics. A plethora of heuristics have been proposed based on a wide spectrum of techniques, including branch-and-bound, integer-programming, searching, graph-theory, randomization, genetic algorithms, and evolutionary methods. The objective of this survey is to describe various scheduling algorithms and their functionalities in a contrasting fashion as well as examine their relative merits in terms of performance and time-complexity. Since these algorithms are based on diverse assumptions, they differ in their functionalities, and hence are difficult to describe in a unified context. We propose a taxonomy that classifies these algorithms into different categories. We consider 27 scheduling algorithms, with each algorithm explained through an easy-to-understand description followed by an illustrative example to demonstrate its operation. We also outline some of the novel and promising optimization approaches and current research trends in the area. Finally, we give an overview of the software tools that provide scheduling/mapping functionalities.", :doc-id "Static scheduling algorithms for allocating directed task graphs to multiprocessors. 1999  ,  "}, 1077391 #search_api.search_api.Paper{:id 1077391, :key "journals/talg/Ibarra08", :title "Fully dynamic algorithms for chordal graphs and split graphs.", :abstract "We present the first dynamic algorithm that maintains a clique tree representation of a chordal graph and supports the following operations: (1) query whether deleting or inserting an arbitrary edge preserves chordality; and (2) delete or insert an arbitrary edge, provided it preserves chordality. We give two implementations. In the first, each operation runs in O(n) time, where n is the number of vertices. In the second, an insertion query runs in O(log2 n) time, an insertion in O(n) time, a deletion query in O(n) time, and a deletion in O(n log n) time. We also present a data structure that allows a deletion query to run in O(&sqrt;m) time in either implementation, where m is the current number of edges. Updating this data structure after a deletion or insertion requires O(m) time. We also present a very simple dynamic algorithm that supports each of the following operations in O(1) time on a general graph: (1) query whether the graph is split, and (2) delete or insert an arbitrary edge.", :author (#search_api.search_api.Author{:id 761988, :first-name nil, :last-name nil, :full-name "Louis Ibarra"}), :year 2008, :venue "ACM Transactions on Algorithms", :ncit 27, :string "Fully dynamic algorithms for chordal graphs and split graphs.. We present the first dynamic algorithm that maintains a clique tree representation of a chordal graph and supports the following operations: (1) query whether deleting or inserting an arbitrary edge preserves chordality; and (2) delete or insert an arbitrary edge, provided it preserves chordality. We give two implementations. In the first, each operation runs in O(n) time, where n is the number of vertices. In the second, an insertion query runs in O(log2 n) time, an insertion in O(n) time, a deletion query in O(n) time, and a deletion in O(n log n) time. We also present a data structure that allows a deletion query to run in O(&sqrt;m) time in either implementation, where m is the current number of edges. Updating this data structure after a deletion or insertion requires O(m) time. We also present a very simple dynamic algorithm that supports each of the following operations in O(1) time on a general graph: (1) query whether the graph is split, and (2) delete or insert an arbitrary edge.", :doc-id "Fully dynamic algorithms for chordal graphs and split graphs. 2008  "}, 1031248 #search_api.search_api.Paper{:id 1031248, :key "journals/pami/BoykovVZ01", :title "Fast Approximate Energy Minimization via Graph Cuts.", :abstract "Many tasks in computer vision involve assigning a label (such as disparity) to every pixel. A common constraint is that the labels should vary smoothly almost everywhere while preserving sharp discontinuities that may exist, e.g., at object boundaries. These tasks are naturally stated in terms of energy minimization. In this paper, we consider a wide class of energies with various smoothness constraints. Global minimization of these energy functions is NP-hard even in the simplest discontinuity-preserving case. Therefore, our focus is on efficient approximation algorithms. We present two algorithms based on graph cuts that efficiently find a local minimum with respect to two types of large moves, namely expansion moves and swap moves. These moves can simultaneously change the labels of arbitrarily large sets of pixels. In contrast, many standard algorithms (including simulated annealing) use small moves where only one pixel changes its label at a time. Our expansion algorithm finds a labeling within a known factor of the global minimum, while our swap algorithm handles more general energy functions. Both of these algorithms allow important cases of discontinuity preserving energies. We experimentally demonstrate the effectiveness of our approach for image restoration, stereo and motion. On real data with ground truth, we achieve 98 percent accuracy.", :author (#search_api.search_api.Author{:id 1303286, :first-name nil, :last-name nil, :full-name "Yuri Boykov"} #search_api.search_api.Author{:id 1316379, :first-name nil, :last-name nil, :full-name "Olga Veksler"} #search_api.search_api.Author{:id 367053, :first-name nil, :last-name nil, :full-name "Ramin Zabih"}), :year 2001, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 3084, :string "Fast Approximate Energy Minimization via Graph Cuts.. Many tasks in computer vision involve assigning a label (such as disparity) to every pixel. A common constraint is that the labels should vary smoothly almost everywhere while preserving sharp discontinuities that may exist, e.g., at object boundaries. These tasks are naturally stated in terms of energy minimization. In this paper, we consider a wide class of energies with various smoothness constraints. Global minimization of these energy functions is NP-hard even in the simplest discontinuity-preserving case. Therefore, our focus is on efficient approximation algorithms. We present two algorithms based on graph cuts that efficiently find a local minimum with respect to two types of large moves, namely expansion moves and swap moves. These moves can simultaneously change the labels of arbitrarily large sets of pixels. In contrast, many standard algorithms (including simulated annealing) use small moves where only one pixel changes its label at a time. Our expansion algorithm finds a labeling within a known factor of the global minimum, while our swap algorithm handles more general energy functions. Both of these algorithms allow important cases of discontinuity preserving energies. We experimentally demonstrate the effectiveness of our approach for image restoration, stereo and motion. On real data with ground truth, we achieve 98 percent accuracy.", :doc-id "Fast Approximate Energy Minimization via Graph Cuts. 2001  ,  ,  "}, 1078416 #search_api.search_api.Paper{:id 1078416, :key "journals/tc/BuiM96", :title "Genetic Algorithm and Graph Partitioning.", :abstract "Hybrid genetic algorithms (GAs) for the graph partitioning problem are described. The algorithms include a fast local improvement heuristic. One of the novel features of these algorithms is the schema preprocessing phase that improves GAs' space searching capability, which in turn improves the performance of GAs. Experimental tests on graph problems with published solutions showed that the new genetic algorithms performed comparable to or better than the multistart Kernighan-Lin algorithm and the simulated annealing algorithm. Analyses of some special classes of graphs are also provided showing the usefulness of schema preprocessing and supporting the experimental results.", :author (#search_api.search_api.Author{:id 1410049, :first-name nil, :last-name nil, :full-name "Thang Nguyen Bui"} #search_api.search_api.Author{:id 365858, :first-name nil, :last-name nil, :full-name "Byung Ro Moon"}), :year 1996, :venue "IEEE Trans. Computers", :ncit 310, :string "Genetic Algorithm and Graph Partitioning.. Hybrid genetic algorithms (GAs) for the graph partitioning problem are described. The algorithms include a fast local improvement heuristic. One of the novel features of these algorithms is the schema preprocessing phase that improves GAs' space searching capability, which in turn improves the performance of GAs. Experimental tests on graph problems with published solutions showed that the new genetic algorithms performed comparable to or better than the multistart Kernighan-Lin algorithm and the simulated annealing algorithm. Analyses of some special classes of graphs are also provided showing the usefulness of schema preprocessing and supporting the experimental results.", :doc-id "Genetic Algorithm and Graph Partitioning. 1996  ,  "}, 545424 #search_api.search_api.Paper{:id 545424, :key "conf/pods/ShashaWG02", :title "Algorithmics and Applications of Tree and Graph Searching.", :abstract "Modern search engines answer keyword-based queries extremely efficiently. The impressive speed is due to clever inverted index structures, caching, a domain-independent knowledge of strings, and thousands of machines. Several research efforts have attempted to generalize keyword search to keytree and keygraph searching, because trees and graphs have many applications in next-generation database systems. This paper surveys both algorithms and applications, giving some emphasis to our own work.", :author (#search_api.search_api.Author{:id 47050, :first-name nil, :last-name nil, :full-name "Dennis Shasha"} #search_api.search_api.Author{:id 705989, :first-name nil, :last-name nil, :full-name "Jason Tsong-Li Wang"} #search_api.search_api.Author{:id 187685, :first-name nil, :last-name nil, :full-name "Rosalba Giugno"}), :year 2002, :venue "PODS", :ncit 347, :string "Algorithmics and Applications of Tree and Graph Searching.. Modern search engines answer keyword-based queries extremely efficiently. The impressive speed is due to clever inverted index structures, caching, a domain-independent knowledge of strings, and thousands of machines. Several research efforts have attempted to generalize keyword search to keytree and keygraph searching, because trees and graphs have many applications in next-generation database systems. This paper surveys both algorithms and applications, giving some emphasis to our own work.", :doc-id "Algorithmics and Applications of Tree and Graph Searching. 2002  ,  ,  "}, 832368 #search_api.search_api.Paper{:id 832368, :key "journals/csur/ChakrabartiF06", :title "Graph mining: Laws, generators, and algorithms.", :abstract "How does the Web look? How could we tell an abnormal social network from a normal one? These and similar questions are important in many fields where the data can intuitively be cast as a graph; examples range from computer networks to sociology to biology and many more. Indeed, any M : N relation in database terminology can be represented as a graph. A lot of these questions boil down to the following: &ldquo;How can we generate synthetic but realistic graphs?&rdquo; To answer this, we must first understand what patterns are common in real-world graphs and can thus be considered a mark of normality/realism. This survey give an overview of the incredible variety of work that has been done on these problems. One of our main contributions is the integration of points of view from physics, mathematics, sociology, and computer science. Further, we briefly describe recent advances on some related and interesting graph problems.", :author (#search_api.search_api.Author{:id 152749, :first-name nil, :last-name nil, :full-name "Deepayan Chakrabarti"} #search_api.search_api.Author{:id 354153, :first-name nil, :last-name nil, :full-name "Christos Faloutsos"}), :year 2006, :venue "ACM Comput. Surv.", :ncit 313, :string "Graph mining: Laws, generators, and algorithms.. How does the Web look? How could we tell an abnormal social network from a normal one? These and similar questions are important in many fields where the data can intuitively be cast as a graph; examples range from computer networks to sociology to biology and many more. Indeed, any M : N relation in database terminology can be represented as a graph. A lot of these questions boil down to the following: &ldquo;How can we generate synthetic but realistic graphs?&rdquo; To answer this, we must first understand what patterns are common in real-world graphs and can thus be considered a mark of normality/realism. This survey give an overview of the incredible variety of work that has been done on these problems. One of our main contributions is the integration of points of view from physics, mathematics, sociology, and computer science. Further, we briefly describe recent advances on some related and interesting graph problems.", :doc-id "Graph mining: Laws, generators, and algorithms. 2006  ,  "}, 1060529 #search_api.search_api.Paper{:id 1060529, :key "journals/siamcomp/Tarjan72", :title "Depth-First Search and Linear Graph Algorithms.", :abstract "The value of depth-first search or \"backtracking\" as a technique for solving graph problems is illustrated by two examples. An algorithm for finding the biconnected components of an undirected graph and an improved version of an algorithm for finding the strongly connected components of a directed graph are presented. The space and time requirements of both algorithms are bounded by k1V + k2E + k3 for some constants k1, k2, and k3, where V is the number of vertices and E is the number of edges of the graph being examined.", :author (#search_api.search_api.Author{:id 74831, :first-name nil, :last-name nil, :full-name "Robert Endre Tarjan"}), :year 1972, :venue "SIAM J. Comput.", :ncit 4056, :string "Depth-First Search and Linear Graph Algorithms.. The value of depth-first search or \"backtracking\" as a technique for solving graph problems is illustrated by two examples. An algorithm for finding the biconnected components of an undirected graph and an improved version of an algorithm for finding the strongly connected components of a directed graph are presented. The space and time requirements of both algorithms are bounded by k1V + k2E + k3 for some constants k1, k2, and k3, where V is the number of vertices and E is the number of edges of the graph being examined.", :doc-id "Depth-First Search and Linear Graph Algorithms. 1972  "}, 610994 #search_api.search_api.Paper{:id 610994, :key "conf/soda/KratschMMS03", :title "Certifying algorithms for recognizing interval graphs and permutation graphs.", :abstract "A certifying algorithm for a problem is an algorithm that provides a certificate with each answer that it produces. The certificate is a piece of evidence that proves that the answer has not been compromised by a bug in the implementation. We give linear-time certifying algorithms for recognition of interval graphs and permutation graphs, and for a few other related problems. Previous algorithms fail to provide supporting evidence when they claim that the input graph is not a member of the class. We show that our certificates of nonmembership can be authenticated in O(|V|) time.", :author (#search_api.search_api.Author{:id 457280, :first-name nil, :last-name nil, :full-name "Dieter Kratsch"} #search_api.search_api.Author{:id 60053, :first-name nil, :last-name nil, :full-name "Ross M. McConnell"} #search_api.search_api.Author{:id 1234684, :first-name nil, :last-name nil, :full-name "Kurt Mehlhorn"} #search_api.search_api.Author{:id 658252, :first-name nil, :last-name nil, :full-name "Jeremy Spinrad"}), :year 2003, :venue "SODA", :ncit 93, :string "Certifying algorithms for recognizing interval graphs and permutation graphs.. A certifying algorithm for a problem is an algorithm that provides a certificate with each answer that it produces. The certificate is a piece of evidence that proves that the answer has not been compromised by a bug in the implementation. We give linear-time certifying algorithms for recognition of interval graphs and permutation graphs, and for a few other related problems. Previous algorithms fail to provide supporting evidence when they claim that the input graph is not a member of the class. We show that our certificates of nonmembership can be authenticated in O(|V|) time.", :doc-id "Certifying algorithms for recognizing interval graphs and permutation graphs. 2003  ,  ,  ,  "}, 3790610 #search_api.search_api.Paper{:id 3790610, :key "conf/stoc/RodittyW13", :title "Fast approximation algorithms for the diameter and radius of sparse graphs.", :abstract nil, :author (#search_api.search_api.Author{:id 1386635, :first-name nil, :last-name nil, :full-name "Liam Roditty"} #search_api.search_api.Author{:id 1541941, :first-name nil, :last-name nil, :full-name "Virginia Vassilevska Williams"}), :year 2013, :venue "STOC", :ncit 0, :string "Fast approximation algorithms for the diameter and radius of sparse graphs.. ", :doc-id "Fast approximation algorithms for the diameter and radius of sparse graphs. 2013  ,  "}, 1343091 #search_api.search_api.Paper{:id 1343091, :key "journals/tcs/BorodinBLM10", :title "Priority algorithms for graph optimization problems.", :abstract "We continue the study of priority or ''greedy-like'' algorithms as initiated in Borodin et al. (2003) [10] and as extended to graph theoretic problems in Davis and Impagliazzo (2009) [12]. Graph theoretic problems pose some modeling problems that did not exist in the original applications of Borodin et al. and Angelopoulos and Borodin (2002) [3]. Following the work of Davis and Impagliazzo, we further clarify these concepts. In the graph theoretic setting, there are several natural input formulations for a given problem and we show that priority algorithm bounds in general depend on the input formulation. We study a variety of graph problems in the context of arbitrary and restricted priority models corresponding to known ''greedy algorithms''.", :author (#search_api.search_api.Author{:id 196045, :first-name nil, :last-name nil, :full-name "Allan Borodin"} #search_api.search_api.Author{:id 8144, :first-name nil, :last-name nil, :full-name "Joan Boyar"} #search_api.search_api.Author{:id 552429, :first-name nil, :last-name nil, :full-name "Kim S. Larsen"} #search_api.search_api.Author{:id 576949, :first-name nil, :last-name nil, :full-name "Nazanin Mirmohammadi"}), :year 2010, :venue "Theor. Comput. Sci.", :ncit 17, :string "Priority algorithms for graph optimization problems.. We continue the study of priority or ''greedy-like'' algorithms as initiated in Borodin et al. (2003) [10] and as extended to graph theoretic problems in Davis and Impagliazzo (2009) [12]. Graph theoretic problems pose some modeling problems that did not exist in the original applications of Borodin et al. and Angelopoulos and Borodin (2002) [3]. Following the work of Davis and Impagliazzo, we further clarify these concepts. In the graph theoretic setting, there are several natural input formulations for a given problem and we show that priority algorithm bounds in general depend on the input formulation. We study a variety of graph problems in the context of arbitrary and restricted priority models corresponding to known ''greedy algorithms''.", :doc-id "Priority algorithms for graph optimization problems. 2010  ,  ,  ,  "}, 980819 #search_api.search_api.Paper{:id 980819, :key "journals/jfp/Erwig01", :title "Inductive graphs and functional graph algorithms.", :abstract "We propose a new style of writing graph algorithms in functional languages which is based on an alternative view of graphs as inductively defined data types. We show how this graph model can be implemented efficiently, and then we demonstrate how graph algorithms can be succinctly given by recursive function definitions based on the inductive graph view. We also regard this as a contribution to the teaching of algorithms and data structures in functional languages since we can use the functional-style graph algorithms instead of the imperative algorithms that are dominant today.", :author (#search_api.search_api.Author{:id 292477, :first-name nil, :last-name nil, :full-name "Martin Erwig"}), :year 2001, :venue "J. Funct. Program.", :ncit 43, :string "Inductive graphs and functional graph algorithms.. We propose a new style of writing graph algorithms in functional languages which is based on an alternative view of graphs as inductively defined data types. We show how this graph model can be implemented efficiently, and then we demonstrate how graph algorithms can be succinctly given by recursive function definitions based on the inductive graph view. We also regard this as a contribution to the teaching of algorithms and data structures in functional languages since we can use the functional-style graph algorithms instead of the imperative algorithms that are dominant today.", :doc-id "Inductive graphs and functional graph algorithms. 2001  "}, 2813652 #search_api.search_api.Paper{:id 2813652, :key "conf/sigcomm/WangCZSDL10", :title "Unbiased sampling in directed social graph.", :abstract "Microblogging services, such as Twitter, are among the most important online social networks(OSNs). Different from OSNs such as Facebook, the topology of microblogging service is a directed graph instead of an undirected graph. Recently, due to the explosive increase of population size, graph sampling has started to play a critical role in measurement and characterization studies of such OSNs. However, previous studies have only focused on the unbiased sampling of undirected social graphs. In this paper, we study the unbiased sampling algorithm for directed social graphs. Based on the traditional Metropolis-Hasting Random Walk (MHRW) algorithm, we propose an unbiased sampling method for directed social graphs(USDSG). Using this method, we get the first, to the best of our knowledge, unbiased sample of directed social graphs. Through extensive experiments comparing with the \"ground truth\" (UNI, obtained through uniform sampling of directed graph nodes), we show that our method can achieve excellent performance in directed graph sampling and the error to UNI is less than 10%.", :author (#search_api.search_api.Author{:id 1555173, :first-name nil, :last-name nil, :full-name "Tianyi Wang"} #search_api.search_api.Author{:id 600574, :first-name nil, :last-name nil, :full-name "Yang Chen"} #search_api.search_api.Author{:id 1225620, :first-name nil, :last-name nil, :full-name "Zengbin Zhang"} #search_api.search_api.Author{:id 946041, :first-name nil, :last-name nil, :full-name "Peng Sun"} #search_api.search_api.Author{:id 108113, :first-name nil, :last-name nil, :full-name "Beixing Deng"} #search_api.search_api.Author{:id 643501, :first-name nil, :last-name nil, :full-name "Xing Li"}), :year 2010, :venue "SIGCOMM", :ncit 6, :string "Unbiased sampling in directed social graph.. Microblogging services, such as Twitter, are among the most important online social networks(OSNs). Different from OSNs such as Facebook, the topology of microblogging service is a directed graph instead of an undirected graph. Recently, due to the explosive increase of population size, graph sampling has started to play a critical role in measurement and characterization studies of such OSNs. However, previous studies have only focused on the unbiased sampling of undirected social graphs. In this paper, we study the unbiased sampling algorithm for directed social graphs. Based on the traditional Metropolis-Hasting Random Walk (MHRW) algorithm, we propose an unbiased sampling method for directed social graphs(USDSG). Using this method, we get the first, to the best of our knowledge, unbiased sample of directed social graphs. Through extensive experiments comparing with the \"ground truth\" (UNI, obtained through uniform sampling of directed graph nodes), we show that our method can achieve excellent performance in directed graph sampling and the error to UNI is less than 10%.", :doc-id "Unbiased sampling in directed social graph. 2010  ,  ,  ,  ,  ,  "}, 1280213 #search_api.search_api.Paper{:id 1280213, :key "journals/pami/ZaslavskiyBV09", :title "A Path Following Algorithm for the Graph Matching Problem.", :abstract "We propose a convex-concave programming approach for the labeled weighted graph matching problem. The convex-concave programming formulation is obtained by rewriting the weighted graph matching problem as a least-square problem on the set of permutation matrices and relaxing it to two different optimization problems: a quadratic convex and a quadratic concave optimization problem on the set of doubly stochastic matrices. The concave relaxation has the same global minimum as the initial graph matching problem, but the search for its global minimum is also a hard combinatorial problem. We, therefore, construct an approximation of the concave problem solution by following a solution path of a convex-concave problem obtained by linear interpolation of the convex and concave formulations, starting from the convex relaxation. This method allows to easily integrate the information on graph label similarities into the optimization problem, and therefore, perform labeled weighted graph matching. The algorithm is compared with some of the best performing graph matching methods on four data sets: simulated graphs, QAPLib, retina vessel images, and handwritten Chinese characters. In all cases, the results are competitive with the state of the art.", :author (#search_api.search_api.Author{:id 840094, :first-name nil, :last-name nil, :full-name "Mikhail Zaslavskiy"} #search_api.search_api.Author{:id 356955, :first-name nil, :last-name nil, :full-name "Francis R. Bach"} #search_api.search_api.Author{:id 1513569, :first-name nil, :last-name nil, :full-name "Jean-Philippe Vert"}), :year 2009, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 47, :string "A Path Following Algorithm for the Graph Matching Problem.. We propose a convex-concave programming approach for the labeled weighted graph matching problem. The convex-concave programming formulation is obtained by rewriting the weighted graph matching problem as a least-square problem on the set of permutation matrices and relaxing it to two different optimization problems: a quadratic convex and a quadratic concave optimization problem on the set of doubly stochastic matrices. The concave relaxation has the same global minimum as the initial graph matching problem, but the search for its global minimum is also a hard combinatorial problem. We, therefore, construct an approximation of the concave problem solution by following a solution path of a convex-concave problem obtained by linear interpolation of the convex and concave formulations, starting from the convex relaxation. This method allows to easily integrate the information on graph label similarities into the optimization problem, and therefore, perform labeled weighted graph matching. The algorithm is compared with some of the best performing graph matching methods on four data sets: simulated graphs, QAPLib, retina vessel images, and handwritten Chinese characters. In all cases, the results are competitive with the state of the art.", :doc-id "A Path Following Algorithm for the Graph Matching Problem. 2009  ,  ,  "}, 832981 #search_api.search_api.Paper{:id 832981, :key "journals/csur/QuinnD84", :title "Parallel Graph Algorithms.", :abstract nil, :author (#search_api.search_api.Author{:id 432558, :first-name nil, :last-name nil, :full-name "Michael J. Quinn"} #search_api.search_api.Author{:id 222669, :first-name nil, :last-name nil, :full-name "Narsingh Deo"}), :year 1984, :venue "ACM Comput. Surv.", :ncit 140, :string "Parallel Graph Algorithms.. ", :doc-id "Parallel Graph Algorithms. 1984  ,  "}, 505781 #search_api.search_api.Paper{:id 505781, :key "conf/mobicom/ServettoB02", :title "Constrained random walks on random graphs: routing algorithms for large scale wireless sensor networks.", :abstract "We consider a routing problem in the context of large scale networks with uncontrolled dynamics. A case of uncontrolled dynamics that has been studied extensively is that of mobile nodes, as this is typically the case in cellular and mobile ad-hoc networks. In this paper however we study routing in the presence of a different type of dynamics: nodes do not move, but instead switch between active and inactive states at random times. Our interest in this case is motivated by the behavior of sensor nodes powered by renewable sources, such as solar cells or ambient vibrations. In this paper we formalize the corresponding routing problem as a problem of constructing suitably constrained random walks on random dynamic graphs. We argue that these random walks should be designed so that their resulting invariant distribution achieves a certain load balancing property, and we give simple distributed algorithms to compute the local parameters for the random walks that achieve the sought behavior. A truly novel feature of our formulation is that the algorithms we obtain are able to route messages along all possible routes between a source and a destination node, without performing explicit route discovery/repair computations, and without maintaining explicit state information about available routes at the nodes. To the best of our knowledge, these are the first algorithms that achieve true multipath routing (in a statistical sense), at the complexity of simple stateless operations.", :author (#search_api.search_api.Author{:id 365878, :first-name nil, :last-name nil, :full-name "Sergio D. Servetto"} #search_api.search_api.Author{:id 326189, :first-name nil, :last-name nil, :full-name "Guillermo Barrenechea"}), :year 2002, :venue "WSNA", :ncit 245, :string "Constrained random walks on random graphs: routing algorithms for large scale wireless sensor networks.. We consider a routing problem in the context of large scale networks with uncontrolled dynamics. A case of uncontrolled dynamics that has been studied extensively is that of mobile nodes, as this is typically the case in cellular and mobile ad-hoc networks. In this paper however we study routing in the presence of a different type of dynamics: nodes do not move, but instead switch between active and inactive states at random times. Our interest in this case is motivated by the behavior of sensor nodes powered by renewable sources, such as solar cells or ambient vibrations. In this paper we formalize the corresponding routing problem as a problem of constructing suitably constrained random walks on random dynamic graphs. We argue that these random walks should be designed so that their resulting invariant distribution achieves a certain load balancing property, and we give simple distributed algorithms to compute the local parameters for the random walks that achieve the sought behavior. A truly novel feature of our formulation is that the algorithms we obtain are able to route messages along all possible routes between a source and a destination node, without performing explicit route discovery/repair computations, and without maintaining explicit state information about available routes at the nodes. To the best of our knowledge, these are the first algorithms that achieve true multipath routing (in a statistical sense), at the complexity of simple stateless operations.", :doc-id "Constrained random walks on random graphs: routing algorithms for large scale wireless sensor networks. 2002  ,  "}, 1340470 #search_api.search_api.Paper{:id 1340470, :key "journals/ml/PahikkalaTAJB09", :title "An efficient algorithm for learning to rank from preference graphs.", :abstract "In this paper, we introduce a framework for regularized least-squares (RLS) type of ranking cost functions and we propose three such cost functions. Further, we propose a kernel-based preference learning algorithm, which we call RankRLS, for minimizing these functions. It is shown that RankRLS has many computational advantages compared to the ranking algorithms that are based on minimizing other types of costs, such as the hinge cost. In particular, we present efficient algorithms for training, parameter selection, multiple output learning, cross-validation, and large-scale learning. Circumstances under which these computational benefits make RankRLS preferable to RankSVM are considered. We evaluate RankRLS on four different types of ranking tasks using RankSVM and the standard RLS regression as the baselines. RankRLS outperforms the standard RLS regression and its performance is very similar to that of RankSVM, while RankRLS has several computational benefits over RankSVM.", :author (#search_api.search_api.Author{:id 429103, :first-name nil, :last-name nil, :full-name "Tapio Pahikkala"} #search_api.search_api.Author{:id 307533, :first-name nil, :last-name nil, :full-name "Evgeni Tsivtsivadze"} #search_api.search_api.Author{:id 1533930, :first-name nil, :last-name nil, :full-name "Antti Airola"} #search_api.search_api.Author{:id 955742, :first-name nil, :last-name nil, :full-name "Jouni JÃ¤rvinen"} #search_api.search_api.Author{:id 1478058, :first-name nil, :last-name nil, :full-name "Jorma Boberg"}), :year 2009, :venue "Machine Learning", :ncit 28, :string "An efficient algorithm for learning to rank from preference graphs.. In this paper, we introduce a framework for regularized least-squares (RLS) type of ranking cost functions and we propose three such cost functions. Further, we propose a kernel-based preference learning algorithm, which we call RankRLS, for minimizing these functions. It is shown that RankRLS has many computational advantages compared to the ranking algorithms that are based on minimizing other types of costs, such as the hinge cost. In particular, we present efficient algorithms for training, parameter selection, multiple output learning, cross-validation, and large-scale learning. Circumstances under which these computational benefits make RankRLS preferable to RankSVM are considered. We evaluate RankRLS on four different types of ranking tasks using RankSVM and the standard RLS regression as the baselines. RankRLS outperforms the standard RLS regression and its performance is very similar to that of RankSVM, while RankRLS has several computational benefits over RankSVM.", :doc-id "An efficient algorithm for learning to rank from preference graphs. 2009  ,  ,  ,  ,  "}, 1118422 #search_api.search_api.Paper{:id 1118422, :key "journals/tods/IoannidisRW93", :title "Transitive Closure Algorithms Based on Graph Traversal.", :abstract "Several graph-based algorithms have been proposed in the literature to compute the transitive closure of a directed graph. We develop two new algorithms (Basic_TC and Gobal_DFTC) and compare the performance of their implementations in a disk-based environment with a well-known graph-based algorithm proposed by Schmitz. Our algorithms use depth-first search to traverse a graph and a technique called marking to avoid processing some of the arcs in the graph. They compute the closure by processing nodes in reverse topological order, building descendent sets by adding the descendent sets of children. While the details of these algorithms differ considerably, one important difference among them is the time at which descendent set additions are performed. Basic_TC, results in superior performance. The first reason is that early additions result in larger descendent set sizes on the average over the duration of the execution, thereby causing more I/O; very often this turns out to more than offset the gains of not having to fetch certain sets again to add them. The second reason is that information collected in the first pass can be used to apply several optimizations in the second pass. To the extent possible, we also adapt these algorithms to perform path computations. Again, our performance comparison confirms the trends seen in reachability queries. Taken in conjunction with another performance study our results indicate that all graph-based algorithms significantly outperform other types of algorithms such as Seminaive and Warren.", :author (#search_api.search_api.Author{:id 274663, :first-name nil, :last-name nil, :full-name "Yannis E. Ioannidis"} #search_api.search_api.Author{:id 464920, :first-name nil, :last-name nil, :full-name "Raghu Ramakrishnan"} #search_api.search_api.Author{:id 1320134, :first-name nil, :last-name nil, :full-name "Linda Winger"}), :year 1993, :venue "ACM Trans. Database Syst.", :ncit 81, :string "Transitive Closure Algorithms Based on Graph Traversal.. Several graph-based algorithms have been proposed in the literature to compute the transitive closure of a directed graph. We develop two new algorithms (Basic_TC and Gobal_DFTC) and compare the performance of their implementations in a disk-based environment with a well-known graph-based algorithm proposed by Schmitz. Our algorithms use depth-first search to traverse a graph and a technique called marking to avoid processing some of the arcs in the graph. They compute the closure by processing nodes in reverse topological order, building descendent sets by adding the descendent sets of children. While the details of these algorithms differ considerably, one important difference among them is the time at which descendent set additions are performed. Basic_TC, results in superior performance. The first reason is that early additions result in larger descendent set sizes on the average over the duration of the execution, thereby causing more I/O; very often this turns out to more than offset the gains of not having to fetch certain sets again to add them. The second reason is that information collected in the first pass can be used to apply several optimizations in the second pass. To the extent possible, we also adapt these algorithms to perform path computations. Again, our performance comparison confirms the trends seen in reachability queries. Taken in conjunction with another performance study our results indicate that all graph-based algorithms significantly outperform other types of algorithms such as Seminaive and Warren.", :doc-id "Transitive Closure Algorithms Based on Graph Traversal. 1993  ,  ,  "}, 611606 #search_api.search_api.Paper{:id 611606, :key "conf/soda/AndersenL08", :title "An algorithm for improving graph partitions.", :abstract "We present an algorithm called Improve that improves a proposed partition of a graph, taking as input a subset of vertices and returning a new subset of vertices with a smaller quotient cut score. The most powerful previously known method for improving quotient cuts, which is based on parametric flow, returns a partition whose quotient cut score is at least as small as any set contained within the proposed set. For our algorithm, we can prove a stronger guarantee: the quotient score of the set returned is nearly as small as any set in the graph with which the proposed set has a larger-than-expected intersection. The algorithm finds such a set by solving a sequence of polynomially many s -- t minimum cut problems, a sequence that cannot be cast as a single parametric flow problem. We demonstrate empirically that applying Improve to the output of various graph partitioning algorithms greatly improves the quality of cuts produced without significantly impacting the running time.", :author (#search_api.search_api.Author{:id 99878, :first-name nil, :last-name nil, :full-name "Reid Andersen"} #search_api.search_api.Author{:id 233500, :first-name nil, :last-name nil, :full-name "Kevin J. Lang"}), :year 2008, :venue "SODA", :ncit 26, :string "An algorithm for improving graph partitions.. We present an algorithm called Improve that improves a proposed partition of a graph, taking as input a subset of vertices and returning a new subset of vertices with a smaller quotient cut score. The most powerful previously known method for improving quotient cuts, which is based on parametric flow, returns a partition whose quotient cut score is at least as small as any set contained within the proposed set. For our algorithm, we can prove a stronger guarantee: the quotient score of the set returned is nearly as small as any set in the graph with which the proposed set has a larger-than-expected intersection. The algorithm finds such a set by solving a sequence of polynomially many s -- t minimum cut problems, a sequence that cannot be cast as a single parametric flow problem. We demonstrate empirically that applying Improve to the output of various graph partitioning algorithms greatly improves the quality of cuts produced without significantly impacting the running time.", :doc-id "An algorithm for improving graph partitions. 2008  ,  "}, 949686 #search_api.search_api.Paper{:id 949686, :key "journals/jacm/Baker94", :title "Approximation Algorithms for NP-Complete Problems on Planar Graphs.", :abstract "This paper describes a general technique that can be used to obtain approximation algorithms for various NP-complete problems on planar graphs. The strategy depends on decomposing a planar graph into subgraphs of a form we call k- outerplanar. For fixed k, the problems of interest are solvable optimally in linear time on k-outerplanar graphs by dynamic programming. For general planar graphs, if the problem is a maximization problem, such as maximum independent set, this technique gives for each k a linear time algorithm that produces a solution whose size is at least (k-1)/k optimal. If the problem is a minimization problem, such as minimum vertex cover, it gives for each k a linear time algorithm that produces a solution whose size is at most (k + 1)/k optimal. Taking k = c log log n or k = c log n, where n is the number of nodes and c is some constant, we get polynomial time approximation schemes, i.e. algorithms whose solution sizes converge toward optimal as n increases. The class of problems for which this approach provides approximation schemes includes maximum independent set, maximum tile salvage, partition into triangles, maximum H-matching, minimum vertex cover, minimum dominating set, and minimum edge dominating set. For these and certain other problems, the proof of solvability on k-outerplanar graphs also enlarges the class of planar graphs for which the problems are known to be solvable.", :author (#search_api.search_api.Author{:id 709908, :first-name nil, :last-name nil, :full-name "Brenda S. Baker"}), :year 1994, :venue "J. ACM", :ncit 701, :string "Approximation Algorithms for NP-Complete Problems on Planar Graphs.. This paper describes a general technique that can be used to obtain approximation algorithms for various NP-complete problems on planar graphs. The strategy depends on decomposing a planar graph into subgraphs of a form we call k- outerplanar. For fixed k, the problems of interest are solvable optimally in linear time on k-outerplanar graphs by dynamic programming. For general planar graphs, if the problem is a maximization problem, such as maximum independent set, this technique gives for each k a linear time algorithm that produces a solution whose size is at least (k-1)/k optimal. If the problem is a minimization problem, such as minimum vertex cover, it gives for each k a linear time algorithm that produces a solution whose size is at most (k + 1)/k optimal. Taking k = c log log n or k = c log n, where n is the number of nodes and c is some constant, we get polynomial time approximation schemes, i.e. algorithms whose solution sizes converge toward optimal as n increases. The class of problems for which this approach provides approximation schemes includes maximum independent set, maximum tile salvage, partition into triangles, maximum H-matching, minimum vertex cover, minimum dominating set, and minimum edge dominating set. For these and certain other problems, the proof of solvability on k-outerplanar graphs also enlarges the class of planar graphs for which the problems are known to be solvable.", :doc-id "Approximation Algorithms for NP-Complete Problems on Planar Graphs. 1994  "}, 3028343 #search_api.search_api.Paper{:id 3028343, :key "conf/stoc/Chuzhoy11", :title "An algorithm for the graph crossing number problem.", :abstract nil, :author (#search_api.search_api.Author{:id 1304375, :first-name nil, :last-name nil, :full-name "Julia Chuzhoy"}), :year 2011, :venue "STOC", :ncit 6, :string "An algorithm for the graph crossing number problem.. ", :doc-id "An algorithm for the graph crossing number problem. 2011  "}, 292855 #search_api.search_api.Paper{:id 292855, :key "conf/iccv/BoykovVZ99", :title "Fast Approximate Energy Minimization via Graph Cuts.", :abstract "Many tasks in computer vision involve assigning a label (such as disparity) to every pixel. A common constraint is that the labels should vary smoothly almost everywhere while preserving sharp discontinuities that may exist, e.g., at object boundaries. These tasks are naturally stated in terms of energy minimization. In this paper, we consider a wide class of energies with various smoothness constraints. Global minimization of these energy functions is NP-hard even in the simplest discontinuity-preserving case. Therefore, our focus is on efficient approximation algorithms. We present two algorithms based on graph cuts that efficiently find a local minimum with respect to two types of large moves, namely expansion moves and swap moves. These moves can simultaneously change the labels of arbitrarily large sets of pixels. In contrast, many standard algorithms (including simulated annealing) use small moves where only one pixel changes its label at a time. Our expansion algorithm finds a labeling within a known factor of the global minimum, while our swap algorithm handles more general energy functions. Both of these algorithms allow important cases of discontinuity preserving energies. We experimentally demonstrate the effectiveness of our approach for image restoration, stereo and motion. On real data with ground truth, we achieve 98 percent accuracy.", :author (#search_api.search_api.Author{:id 1303286, :first-name nil, :last-name nil, :full-name "Yuri Boykov"} #search_api.search_api.Author{:id 1316379, :first-name nil, :last-name nil, :full-name "Olga Veksler"} #search_api.search_api.Author{:id 367053, :first-name nil, :last-name nil, :full-name "Ramin Zabih"}), :year 1999, :venue "ICCV", :ncit 3773, :string "Fast Approximate Energy Minimization via Graph Cuts.. Many tasks in computer vision involve assigning a label (such as disparity) to every pixel. A common constraint is that the labels should vary smoothly almost everywhere while preserving sharp discontinuities that may exist, e.g., at object boundaries. These tasks are naturally stated in terms of energy minimization. In this paper, we consider a wide class of energies with various smoothness constraints. Global minimization of these energy functions is NP-hard even in the simplest discontinuity-preserving case. Therefore, our focus is on efficient approximation algorithms. We present two algorithms based on graph cuts that efficiently find a local minimum with respect to two types of large moves, namely expansion moves and swap moves. These moves can simultaneously change the labels of arbitrarily large sets of pixels. In contrast, many standard algorithms (including simulated annealing) use small moves where only one pixel changes its label at a time. Our expansion algorithm finds a labeling within a known factor of the global minimum, while our swap algorithm handles more general energy functions. Both of these algorithms allow important cases of discontinuity preserving energies. We experimentally demonstrate the effectiveness of our approach for image restoration, stereo and motion. On real data with ground truth, we achieve 98 percent accuracy.", :doc-id "Fast Approximate Energy Minimization via Graph Cuts. 1999  ,  ,  "}, 1031416 #search_api.search_api.Paper{:id 1031416, :key "journals/pami/CordellaFSV04", :title "A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs.", :abstract "We present an algorithm for graph isomorphism and subgraph isomorphism suited for dealing with large graphs. A first version of the algorithm has been presented in a previous paper, where we examined its performance for the isomorphism of small and medium size graphs. The algorithm is improved here to reduce its spatial complexity and to achieve a better performance on large graphs; its features are analyzed in detail with special reference to time and memory requirements. The results of a testing performed on a publicly available database of synthetically generated graphs and on graphs relative to a real application dealing with technical drawings are presented, confirming the effectiveness of the approach, especially when working with large graphs.", :author (#search_api.search_api.Author{:id 827940, :first-name nil, :last-name nil, :full-name "Luigi P. Cordella"} #search_api.search_api.Author{:id 392931, :first-name nil, :last-name nil, :full-name "Pasquale Foggia"} #search_api.search_api.Author{:id 393450, :first-name nil, :last-name nil, :full-name "Carlo Sansone"} #search_api.search_api.Author{:id 654571, :first-name nil, :last-name nil, :full-name "Mario Vento"}), :year 2004, :venue "IEEE Trans. Pattern Anal. Mach. Intell.", :ncit 317, :string "A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs.. We present an algorithm for graph isomorphism and subgraph isomorphism suited for dealing with large graphs. A first version of the algorithm has been presented in a previous paper, where we examined its performance for the isomorphism of small and medium size graphs. The algorithm is improved here to reduce its spatial complexity and to achieve a better performance on large graphs; its features are analyzed in detail with special reference to time and memory requirements. The results of a testing performed on a publicly available database of synthetically generated graphs and on graphs relative to a real application dealing with technical drawings are presented, confirming the effectiveness of the approach, especially when working with large graphs.", :doc-id "A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs. 2004  ,  ,  ,  "}, 1123449 #search_api.search_api.Paper{:id 1123449, :key "journals/toplas/ClarkeES86", :title "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications.", :abstract "We give an efficient procedure for verifying that a finite-state concurrent system meets a specification expressed in a (propositional, branching-time) temporal logic. Our algorithm has complexity linear in both the size of the specification and the size of the global state graph for the concurrent system. We also show how this approach can be adapted to handle fairness. We argue that our technique can provide a practical alternative to manual proof construction or use of a mechanical theorem prover for verifying many finite-state concurrent systems. Experimental results show that state machines with several hundred states can be checked in a matter of seconds.", :author (#search_api.search_api.Author{:id 635727, :first-name nil, :last-name nil, :full-name "Edmund M. Clarke"} #search_api.search_api.Author{:id 138458, :first-name nil, :last-name nil, :full-name "E. Allen Emerson"} #search_api.search_api.Author{:id 619781, :first-name nil, :last-name nil, :full-name "A. Prasad Sistla"}), :year 1986, :venue "ACM Trans. Program. Lang. Syst.", :ncit 4073, :string "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications.. We give an efficient procedure for verifying that a finite-state concurrent system meets a specification expressed in a (propositional, branching-time) temporal logic. Our algorithm has complexity linear in both the size of the specification and the size of the global state graph for the concurrent system. We also show how this approach can be adapted to handle fairness. We argue that our technique can provide a practical alternative to manual proof construction or use of a mechanical theorem prover for verifying many finite-state concurrent systems. Experimental results show that state machines with several hundred states can be checked in a matter of seconds.", :doc-id "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications. 1986  ,  ,  "}, 3690105 #search_api.search_api.Paper{:id 3690105, :key "journals/tcs/ElberfeldSDSS13", :title "Approximation algorithms for orienting mixed graphs.", :abstract nil, :author (#search_api.search_api.Author{:id 1539346, :first-name nil, :last-name nil, :full-name "Michael Elberfeld"} #search_api.search_api.Author{:id 383749, :first-name nil, :last-name nil, :full-name "Danny Segev"} #search_api.search_api.Author{:id 14196070, :first-name nil, :last-name nil, :full-name "Colin R. Davidson"} #search_api.search_api.Author{:id 14099855, :first-name nil, :last-name nil, :full-name "Dana Silverbush"} #search_api.search_api.Author{:id 35289, :first-name nil, :last-name nil, :full-name "Roded Sharan"}), :year 2013, :venue "Theor. Comput. Sci.", :ncit 0, :string "Approximation algorithms for orienting mixed graphs.. ", :doc-id "Approximation algorithms for orienting mixed graphs. 2013  ,  ,  ,  ,  "}, 211322 #search_api.search_api.Paper{:id 211322, :key "conf/focs/LinialLR94", :title "The geometry of graphs and some of its algorithmic applications", :abstract "We explore some implications of viewing graphs as geometric objects. This approach offers a new perspective on a number of graph-theoretic and algorithmic problems. There are several ways to model graphs geometrically and our main concern here is with geometric representations that respect the metric of the (possibly weighted) graph. Given a graph G we map its vertices to a normed space in an attempt to (i) Keep down the dimension of the host space and (ii) Guarantee a small distortion, i.e., make sure that distances between vertices in G closely match the distances between their geometric images. We develop efficient algorithms for embedding graphs low-dimensionally with a small distortion.", :author (#search_api.search_api.Author{:id 720090, :first-name nil, :last-name nil, :full-name "Nathan Linial"} #search_api.search_api.Author{:id 27948, :first-name nil, :last-name nil, :full-name "Eran London"} #search_api.search_api.Author{:id 174494, :first-name nil, :last-name nil, :full-name "Yuri Rabinovich"}), :year 1994, :venue "FOCS", :ncit 786, :string "The geometry of graphs and some of its algorithmic applications. We explore some implications of viewing graphs as geometric objects. This approach offers a new perspective on a number of graph-theoretic and algorithmic problems. There are several ways to model graphs geometrically and our main concern here is with geometric representations that respect the metric of the (possibly weighted) graph. Given a graph G we map its vertices to a normed space in an attempt to (i) Keep down the dimension of the host space and (ii) Guarantee a small distortion, i.e., make sure that distances between vertices in G closely match the distances between their geometric images. We develop efficient algorithms for embedding graphs low-dimensionally with a small distortion.", :doc-id "The geometry of graphs and some of its algorithmic applications 1994  ,  ,  "}, 971578 #search_api.search_api.Paper{:id 971578, :key "journals/jcss/BoothL76", :title "Testing for the Consecutive Ones Property, Interval Graphs, and Graph Planarity Using PQ-Tree Algorithms.", :abstract "A data structure called a PQ-tree is introduced. PQ-trees can be used to represent the permutations of a set U in which various subsets of U occur consecutively. Efficient algorithms are presented for manipulating PQ-trees. Algorithms using PQ-trees are then given which test for the consecutive ones property in matrices and for graph planarity. The consecutive ones test is extended to a test for interval graphs using a recently discovered fast recognition algorithm for chordal graphs. All of these algorithms require a number of steps linear in the size of their input.", :author (#search_api.search_api.Author{:id 328470, :first-name nil, :last-name nil, :full-name "Kellogg S. Booth"} #search_api.search_api.Author{:id 640688, :first-name nil, :last-name nil, :full-name "George S. Lueker"}), :year 1976, :venue "J. Comput. Syst. Sci.", :ncit 1377, :string "Testing for the Consecutive Ones Property, Interval Graphs, and Graph Planarity Using PQ-Tree Algorithms.. A data structure called a PQ-tree is introduced. PQ-trees can be used to represent the permutations of a set U in which various subsets of U occur consecutively. Efficient algorithms are presented for manipulating PQ-trees. Algorithms using PQ-trees are then given which test for the consecutive ones property in matrices and for graph planarity. The consecutive ones test is extended to a test for interval graphs using a recently discovered fast recognition algorithm for chordal graphs. All of these algorithms require a number of steps linear in the size of their input.", :doc-id "Testing for the Consecutive Ones Property, Interval Graphs, and Graph Planarity Using PQ-Tree Algorithms. 1976  ,  "}, 950139 #search_api.search_api.Paper{:id 950139, :key "journals/jacm/DemaineFHT05", :title "Subexponential parameterized algorithms on bounded-genus graphs and -minor-free graphs.", :abstract "We introduce a new framework for designing fixed-parameter algorithms with subexponential running time---2O(&kradic;) nO(1). Our results apply to a broad family of graph problems, called bidimensional problems, which includes many domination and problems such as vertex cover, feedback vertex set, minimum maximal matching, dominating set, edge dominating set, disk dimension, and many others restricted to bounded-genus graphs (phrased as bipartite-graph problem). Furthermore, it is fairly straightforward to prove that a problem is bidimensional. In particular, our framework includes, as special cases, all previously known problems to have such subexponential algorithms. Previously, these algorithms applied to planar graphs, single-crossing-minor-free graphs, and/or map graphs; we extend these results to apply to bounded-genus graphs as well. In a parallel development of combinatorial results, we establish an upper bound on the treewidth (or branchwidth) of a bounded-genus graph that excludes some planar graph H as a minor. This bound depends linearly on the size &brvbar;V(H)&brvbar; of the excluded graph H and the genus g(G) of the graph G, and applies and extends the graph-minors work of Robertson and Seymour.Building on these results, we develop subexponential fixed-parameter algorithms for dominating set, vertex cover, and set cover in any class of graphs excluding a fixed graph H as a minor. In particular, this general category of graphs includes planar graphs, bounded-genus graphs, single-crossing-minor-free graphs, and any class of graphs that is closed under taking minors. Specifically, the running time is 2O(&kracic;) nh, where h is a constant depending only on H, which is polynomial for k &equals; O(log2 n). We introduce a general approach for developing algorithms on H-minor-free graphs, based on structural results about H-minor-free graphs at the heart of Robertson and Seymour's graph-minors work. We believe this approach opens the way to further development on problems in H-minor-free graphs.", :author (#search_api.search_api.Author{:id 926882, :first-name nil, :last-name nil, :full-name "Erik D. Demaine"} #search_api.search_api.Author{:id 496311, :first-name nil, :last-name nil, :full-name "Fedor V. Fomin"} #search_api.search_api.Author{:id 749135, :first-name nil, :last-name nil, :full-name "Mohammad Taghi Hajiaghayi"} #search_api.search_api.Author{:id 709566, :first-name nil, :last-name nil, :full-name "Dimitrios M. Thilikos"}), :year 2005, :venue "J. ACM", :ncit 181, :string "Subexponential parameterized algorithms on bounded-genus graphs and -minor-free graphs.. We introduce a new framework for designing fixed-parameter algorithms with subexponential running time---2O(&kradic;) nO(1). Our results apply to a broad family of graph problems, called bidimensional problems, which includes many domination and problems such as vertex cover, feedback vertex set, minimum maximal matching, dominating set, edge dominating set, disk dimension, and many others restricted to bounded-genus graphs (phrased as bipartite-graph problem). Furthermore, it is fairly straightforward to prove that a problem is bidimensional. In particular, our framework includes, as special cases, all previously known problems to have such subexponential algorithms. Previously, these algorithms applied to planar graphs, single-crossing-minor-free graphs, and/or map graphs; we extend these results to apply to bounded-genus graphs as well. In a parallel development of combinatorial results, we establish an upper bound on the treewidth (or branchwidth) of a bounded-genus graph that excludes some planar graph H as a minor. This bound depends linearly on the size &brvbar;V(H)&brvbar; of the excluded graph H and the genus g(G) of the graph G, and applies and extends the graph-minors work of Robertson and Seymour.Building on these results, we develop subexponential fixed-parameter algorithms for dominating set, vertex cover, and set cover in any class of graphs excluding a fixed graph H as a minor. In particular, this general category of graphs includes planar graphs, bounded-genus graphs, single-crossing-minor-free graphs, and any class of graphs that is closed under taking minors. Specifically, the running time is 2O(&kracic;) nh, where h is a constant depending only on H, which is polynomial for k &equals; O(log2 n). We introduce a general approach for developing algorithms on H-minor-free graphs, based on structural results about H-minor-free graphs at the heart of Robertson and Seymour's graph-minors work. We believe this approach opens the way to further development on problems in H-minor-free graphs.", :doc-id "Subexponential parameterized algorithms on bounded-genus graphs and -minor-free graphs. 2005  ,  ,  ,  "}, 622748 #search_api.search_api.Paper{:id 622748, :key "conf/stoc/MillerR87", :title "A New Graph Triconnectivity Algorithm and Its Parallelization", :abstract "We present a new algorithm for finding the tri-connected components of an undirected graph. The algorithm is based on ear decomposition and has linear sequential running time. It also has a parallel implementation on a CRCW PRAM with O(log2n) parallel time using a linear number of processors, where n is the number of vertices in the graph. This is the first efficient parallel algorithm for graph tri-connectivity.", :author (#search_api.search_api.Author{:id 499257, :first-name nil, :last-name nil, :full-name "Gary L. Miller"} #search_api.search_api.Author{:id 1067194, :first-name nil, :last-name nil, :full-name "Vijaya Ramachandran"}), :year 1987, :venue "STOC", :ncit 54, :string "A New Graph Triconnectivity Algorithm and Its Parallelization. We present a new algorithm for finding the tri-connected components of an undirected graph. The algorithm is based on ear decomposition and has linear sequential running time. It also has a parallel implementation on a CRCW PRAM with O(log2n) parallel time using a linear number of processors, where n is the number of vertices in the graph. This is the first efficient parallel algorithm for graph tri-connectivity.", :doc-id "A New Graph Triconnectivity Algorithm and Its Parallelization 1987  ,  "}, 1060701 #search_api.search_api.Paper{:id 1060701, :key "journals/siamcomp/KratschMMS06", :title "Certifying Algorithms for Recognizing Interval Graphs and Permutation Graphs.", :abstract "A certifying algorithm for a problem is an algorithm that provides a certificate with each answer that it produces. The certificate is a piece of evidence that proves that the answer has not been compromised by a bug in the implementation. We give linear-time certifying algorithms for recognition of interval graphs and permutation graphs, and for a few other related problems. Previous algorithms fail to provide supporting evidence when they claim that the input graph is not a member of the class. We show that our certificates of nonmembership can be authenticated in O(|V|) time.", :author (#search_api.search_api.Author{:id 457280, :first-name nil, :last-name nil, :full-name "Dieter Kratsch"} #search_api.search_api.Author{:id 60053, :first-name nil, :last-name nil, :full-name "Ross M. McConnell"} #search_api.search_api.Author{:id 1234684, :first-name nil, :last-name nil, :full-name "Kurt Mehlhorn"} #search_api.search_api.Author{:id 658252, :first-name nil, :last-name nil, :full-name "Jeremy Spinrad"}), :year 2006, :venue "SIAM J. Comput.", :ncit 93, :string "Certifying Algorithms for Recognizing Interval Graphs and Permutation Graphs.. A certifying algorithm for a problem is an algorithm that provides a certificate with each answer that it produces. The certificate is a piece of evidence that proves that the answer has not been compromised by a bug in the implementation. We give linear-time certifying algorithms for recognition of interval graphs and permutation graphs, and for a few other related problems. Previous algorithms fail to provide supporting evidence when they claim that the input graph is not a member of the class. We show that our certificates of nonmembership can be authenticated in O(|V|) time.", :doc-id "Certifying Algorithms for Recognizing Interval Graphs and Permutation Graphs. 2006  ,  ,  ,  "}, 3750110 #search_api.search_api.Paper{:id 3750110, :key "conf/soda/GroheKR13", :title "A Simple Algorithm for the Graph Minor Decomposition - Logic meets Structural Graph Theory.", :abstract nil, :author (#search_api.search_api.Author{:id 1184320, :first-name nil, :last-name nil, :full-name "Martin Grohe"} #search_api.search_api.Author{:id 663176, :first-name nil, :last-name nil, :full-name "Ken-ichi Kawarabayashi"} #search_api.search_api.Author{:id 94870, :first-name nil, :last-name nil, :full-name "Bruce A. Reed"}), :year 2013, :venue "SODA", :ncit 0, :string "A Simple Algorithm for the Graph Minor Decomposition - Logic meets Structural Graph Theory.. ", :doc-id "A Simple Algorithm for the Graph Minor Decomposition - Logic meets Structural Graph Theory. 2013  ,  ,  "}}}